/* PROCEDIMENTO DE IMPORTAÇÃO DE DADOS DE UMA BASE PARA OUTRA */
/* POR PADRÃO, EXECUTAR O SCRIPT SEMPRE NA BASE DE ORIGEM */

PRINT '========================================================================='
PRINT 'PROCEDIMENTO QUE IMPORTA TODOS OS DADOS (SEM LOGS) DE UMA BASE PARA OUTRA'
PRINT 'FEITO POR THIAGO'
PRINT 'ULTIMA ATUALIZAÇÃO 05/05/2022'
PRINT 'VERSÃO DA BASE 7.2.49.186'
PRINT '***** EXECUTAR NA BASE DE ORIGEM *****' 
PRINT '========================================================================='
PRINT ''

/* ============================================================= |PARAMETROS DE EXECUÇÃO DO SCRIPT | ============================================================= */

-- CRIAÇÃO DOS TIPOS ESQUEMA E TABELA USADOS NO PROCESSOD E MIGRAÇÃO
IF NOT EXISTS (SELECT 1
                 FROM SYS.TYPES
				WHERE NAME = 'TABELA')
BEGIN

	/* TABELA */
	CREATE TYPE TABELA 
	AS TABLE (ESQUEMA NVARCHAR(50)
			 ,TABELA NVARCHAR(100));
			 
END
GO		

IF NOT EXISTS (SELECT 1
                 FROM SYS.TYPES
				WHERE NAME = 'ESQUEMA')
BEGIN

	/* SCHEMA */
	CREATE TYPE ESQUEMA 
	AS TABLE (ESQUEMA NVARCHAR(50));
			 
END
GO		

BEGIN
BEGIN TRANSACTION
BEGIN TRY

SET XACT_ABORT ON
SET NOCOUNT ON
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

/* VARIÁVEIS INTERNAS */
DECLARE @PADRAO AS TABELA
DECLARE @IGNORAR AS TABELA
DECLARE @ESQUEMA AS ESQUEMA
DECLARE @VERSAOBASEORIGEM NVARCHAR(MAX)
DECLARE @VERSAOBASEDESTINO NVARCHAR(MAX)
DECLARE @SCHEMA NVARCHAR(50)
DECLARE @TABELA NVARCHAR(100)
DECLARE @FK_DIOCESE NVARCHAR(100)
DECLARE @QUERY NVARCHAR(MAX)
DECLARE @INDEX NVARCHAR(MAX)
DECLARE @PARAMETROS NVARCHAR(MAX)
DECLARE @GUID NVARCHAR(100)
DECLARE @SEQUENCIA INTEGER = 0
DECLARE @CAMPOPK NVARCHAR(100)
DECLARE @CAMPOFK NVARCHAR(100)
DECLARE @ORGANISMO NVARCHAR(100)
DECLARE @SCHEMA_UPDATE_ORIGEM NVARCHAR(200)
DECLARE @SCHEMA_UPDATE_DESTINO NVARCHAR(200)

/* --------------------------------------------------------------------------------------------------------------------- */
						
/* PARAMETROS */
DECLARE @BASEORIGEM NVARCHAR(100) = ''
DECLARE @BASEDESTINO NVARCHAR(100) = ''
DECLARE @SERVIDORORIGEM NVARCHAR(100) = ''
DECLARE @SERVIDORDESTINO NVARCHAR(100) = ''
DECLARE @TIPOIMPORTACAO INTEGER = 0                                 /* |0| PARA IMPORTAR OS DADOS TRATANDO OS IDS A SEREM INSERIDOS, |1| PARA EXTRAIR OS DADOS SEM TRATAMENTO DE ID */
DECLARE @TIPOTRATAMENTO_PROFISSAO INTEGER = 1                       /* |0| PARA EXCLUIR AS PROFISSOES DO DESTINO E INSERIR COMO ESTÁ NA ORIGEM, |1| PARA VINCULAR AS PROFISSÕES IGUAIS E INSERIR AS DIFERENTES */
DECLARE @IMPORTACAOTIPO NVARCHAR(20) = 'UNIFICAÇÃO'                
DECLARE @TRATAMENTO NVARCHAR(MAX) = 'UNIFICAÇÃO'
DECLARE @CONDICAO_INSERT NVARCHAR(MAX) = NULL                       /* INFORME A CONDIÇÃO A SER USADO NO PROCEDIMENTO DE INSERT, SE NÃO EXISTIR, INICIALIZAR A VARIÁVEL COM NULO */

/* INFORMAR S = SIM, N = NÃO */
DECLARE @INSTANCIADIFERENTE CHAR(1) = 'S'                           /* INFORME |S| SE A BASE DE DESTINO ESTIVER EM OUTRA INSTÂNCIA E |N| SE FOR A MESMA INSTÂNCIA */
DECLARE @DESABILITA_TRIGGEREFKS CHAR(1) = 'S'                       /* INFORME |S| PARA DESABILITAR TRIGGERS E CONSTRAINTS NA ORIGEM E NO DESTINO E |N| PARA NÃO DESABILITAR */
DECLARE @TRATAPROFISSAO CHAR(1) = 'S'                               /* INFORME |S| PARA EFETUAR O TRATAMENTO DAS PROFISSÕES E |N| PARA NÃO TRATAR */
DECLARE @ATIVA_TRIGGERSFKS CHAR(1) = 'S'                            /* INFORME |S| PARA ATIVAR AS TRIGGERS E FKS NO FINAL DO PROCEDIMENTO E |N| SE NÃO FOR NECESSÁRIO */
DECLARE @REPARA_SEQUENCES CHAR(1) = 'S'                             /* INFORME |S| PARA REPARAR AS SEQUENCES DA BASE DESTINO NO FIM DO PROCEDIMENTO E |N| SE NÃO FOR NECESSÁRIO */
DECLARE @INSERE_ORGANISMOS CHAR(1) = 'N'                            /* INFORME |S| PARA INSERIR DIOCESES E PARÓQUIAS DA ORIGEM NA BASE DE DESTINO E |N| SE NÃO FOR NECESSÁRIO */

/* ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

DECLARE @MIGRACAO_DIOCESANA CHAR(1) = 'N'                           /* INFORME |S| PARA INFORMAR QUE SERÁ MIGRADO TUDO DA BASE DE ORIGEM E |N| QUANDO FOR MIGRAÇÃO APENAS A NÍVEL PARÓQUIA */

/* ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

/* INFORME |S| PARA VINCULAR OS REGISTROS DE PAROQUIAS E DIOCESES NAS DUAS BASES UTILIZANDO O CAMPO CNPJ (TODAS AS PAROQUIAS DA BASE)E |N| PARA NÃO VINCULAR (UMA A UMA) */
DECLARE @TRATARORGANISMOS CHAR(1) = 'N'                             /* SE A VARIÁVEL @INSERE_ORGANISMOS FOR IGUAL A |S|, OBRIGATÓRIAMENTE INFORMAR |S| */      

/* INFORME ESSES PARAMETROS CASO OS PARAMETROS @TRATAORGANISMOS E @INSERE_ORGANISMOS FOR IGUAL A |N|, SE ALGUM DELES FOR IGUAL A |S|, PASSAR O VALOR NULO */
DECLARE @IDDIOCESE_OLD INTEGER = 
DECLARE @IDPAROQUIA_OLD INTEGER = 
DECLARE @IDDIOCESE_NEW INTEGER = 
DECLARE @IDPAROQUIA_NEW INTEGER =       

/* CASO A OPÇÃO ABAIXO SEJA 'S', CERTIFIQUE-SE SE A PLANILHA PADRÃO E PADRÃO DE INSERÇÃO ESTÁ SENDO ATENDIDO. A PLANILHA PADRÃO E AS ORIENTAÇÕES DE USO ESTÁ NO REPOSITÓRIO */
DECLARE @DE_PARA_CONTABIL CHAR(1) = 'N'                             /* INFORME |S| PARA EFETUAR O DE_PARA CONTÁBIL E |N| SE NÃO FOR NECESSÁRIO */

/* ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

/******************************************************/
/* THEOSDBCENTRAL */
/******************************************************/
				
DECLARE @INSTANCIA_THEOSDBCENTRAL NVARCHAR(50) = ''
DECLARE @BASE_THEOSDBCENTRAL NVARCHAR(50) = ''
DECLARE @HOSTNAME NVARCHAR(50) = ''

/* INFORME |S| PARA APAGAR OU ALTERAR O ORGANISMO E USUÁRIOS NA BASE DE ORIGEM E NA THEOSDBCENTRAL E |N| SE NÃO FOR NECESSÁRIO */
DECLARE @CORRIGIR_THEOSDBCENTRAL CHAR(1) = 'N'

/* INFORME |0| PARA ATUALIZAR OS APONTAMENTOS DO ORGANISMO E USUÁRIOS E |1| PARA EXCLUIR OS ORGANISMOS E USUÁRIOS ANTIGOS */
DECLARE @TRATAMENTO_THEOSDBCENTRAL BIT = 0        /* VÁLIDO APENAS SE A VARIÁVEL @CORRIGIR_THEOSDBCENTRAL FOR IGUAL A |S|. (INFORMAR |0| APENAS SE A VARIÁVEL @MIGRACAO_DIOCESANA FOR IGUAL A |S|) */

/* INFORME |S| PARA INSERIR O ORGANISMO NA THEOSDBCENTRAL E |N| SE NÃO FOR NECESSÁRIO */
DECLARE @INSERIR_THEOSDBCENTRAL CHAR(1) = 'N'     /* INFORMAR |S| APENAS SE A VARIÁVEL @CORRIGIR_THEOSDBCENTRAL FOR IGUAL A |N| */                    

/* ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

/* ------------------------------------------- */
/* SCHEMAS A SEREM IMPORTADOS */
/* ------------------------------------------- */

INSERT INTO @ESQUEMA VALUES ('PAROQUIA');
INSERT INTO @ESQUEMA VALUES ('LGPD');
--INSERT INTO @ESQUEMA VALUES ('DBO');

/* ------------------------------------------- */
/* TABELAS COM DADOS PADRÕES */
/* ------------------------------------------- */

/* SCHEMA DBO */
INSERT INTO @PADRAO VALUES ('DBO', 'ATOADMCAMPOPESQUISA');
INSERT INTO @PADRAO VALUES ('DBO', 'ATOADMTIPOMODELO');
INSERT INTO @PADRAO VALUES ('DBO', 'ATOADMTIPOMODELOCAMPO');
INSERT INTO @PADRAO VALUES ('DBO', 'ATOADMTIPOMODELOGRUPO');
INSERT INTO @PADRAO VALUES ('DBO', 'ATOADMTIPOMODELOGRUPO');
INSERT INTO @PADRAO VALUES ('DBO', 'BANCOERRO');
INSERT INTO @PADRAO VALUES ('DBO', 'BANCORETORNO');
INSERT INTO @PADRAO VALUES ('DBO', 'CENTRALIMPRESSAOTIPO');
INSERT INTO @PADRAO VALUES ('DBO', 'CIRCUNSCRICAO');
INSERT INTO @PADRAO VALUES ('DBO', 'CLERIGOFUNCAO');
INSERT INTO @PADRAO VALUES ('DBO', 'CODIGOS_DRE');
INSERT INTO @PADRAO VALUES ('DBO', 'FUNCAOADMINISTRACAO');
INSERT INTO @PADRAO VALUES ('DBO', 'GRIDLAYOUT');
INSERT INTO @PADRAO VALUES ('DBO', 'INDICATIVOOBRAS');
INSERT INTO @PADRAO VALUES ('DBO', 'INDICATIVOSUSPENSAO');
INSERT INTO @PADRAO VALUES ('DBO', 'INDICES_PATRIMONIO');
INSERT INTO @PADRAO VALUES ('DBO', 'INDICES_VALORES_PATRIMONIO');
INSERT INTO @PADRAO VALUES ('DBO', 'LAYOUTARQUIVORETORNO');
INSERT INTO @PADRAO VALUES ('DBO', 'LAYOUTARQUIVORETORNOCAMPO');
INSERT INTO @PADRAO VALUES ('DBO', 'NOTAFISCALCFOP');
INSERT INTO @PADRAO VALUES ('DBO', 'PLANO_CONTAS_CONTABIL_REFERENCIAL');
INSERT INTO @PADRAO VALUES ('DBO', 'RELACIONAMENTOCONTABIL');
INSERT INTO @PADRAO VALUES ('DBO', 'SEGMENTACAO');
INSERT INTO @PADRAO VALUES ('DBO', 'SITUACAOCLERIGO');
INSERT INTO @PADRAO VALUES ('DBO', 'SPEDCONTABIL');
INSERT INTO @PADRAO VALUES ('DBO', 'TIPODOCUMENTO');
INSERT INTO @PADRAO VALUES ('DBO', 'TIPOLAYOUT');
INSERT INTO @PADRAO VALUES ('DBO', 'TIPOMINISTERIOCLERIGO');
INSERT INTO @PADRAO VALUES ('DBO', 'TIPOORGANISMO');
INSERT INTO @PADRAO VALUES ('DBO', 'TIPOSACRAMENTO');
INSERT INTO @PADRAO VALUES ('DBO', 'TIPOSERVICO');
INSERT INTO @PADRAO VALUES ('DBO', 'TITULOCLERIGO');		
INSERT INTO @PADRAO VALUES ('DBO', 'XMLIMPORTACAONFE');

/* SCHEMA LGPD */
INSERT INTO @PADRAO VALUES ('LGPD', 'TABELATELA');
INSERT INTO @PADRAO VALUES ('LGPD', 'TELAACEITE');

/* SCHEMA ECLESIALCARD */
INSERT INTO @PADRAO VALUES ('ECLESIALCARD', 'CONNECTIONSOURCE');
INSERT INTO @PADRAO VALUES ('ECLESIALCARD', 'STOREDEVENT');

/* SCHEMA PAROQUIA */
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'ANEXO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'BANCO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'CAMPOPERFIL');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'CARTAOBANDEIRA');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'CARTAOBANDEIRAPREFIXO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'CARTAOBANDEIRATIPOVENDA');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'CARTAOSTATUS');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'CARTORIO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'CATEGORIACONCILIACAOSTONE');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'CONTATOTIPO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'DICTABELACAMPO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'EMAILTIPO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'EMAILTIPOASSUNTO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'EMAILTIPOCAMPOS');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'ENDERECOTIPO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'ESTADOCIVIL');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'ETIQUETA');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'FAIXAETARIA');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'FAIXAETARIA_FAIXA');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'FORMAPGTO');	
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'HBTIPODOCUMENTO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'MENSAGEMTIPO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'MINISTERIO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'MODELOTEXTO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'MOTIVOINATIVACAO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'MOVIMENTO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'OPERACAO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'ORIGEM');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'PAGAMENTOFILA');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'PARENTESCO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'PASTORAL');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'PROFISSAO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'SISTEMASEXPFINANCEIRO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'SITUACAO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TABELALOG');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOCABECALHO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOFINANCEIRO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOIMOVEL');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOIMOVELDOCUMENTO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOMENSAGEM');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOMODELO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOMODELOCAMPOTELA');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOMOTIVOINATIVACAO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOMOVEL');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOPAGAMENTO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOTRANSACAOEVENTO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOTUMULO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOVEICULO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TIPOVENDA');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TRANSACAOSTATUSDETALHE');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TRANSACAOSOLICITANTE');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'TRANSACAOSTATUSTIPO');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'UNIDADE');
INSERT INTO @PADRAO VALUES ('PAROQUIA', 'VALORCAMPOPERFIL');

/* SCHEMA SISTEMA */
INSERT INTO @PADRAO VALUES ('SISTEMA', 'API');
INSERT INTO @PADRAO VALUES ('SISTEMA', 'ITEMMENUAPI');

/* SCHEMA TRIBUNAL */
INSERT INTO @PADRAO VALUES ('TRIBUNAL', 'CANONE');
INSERT INTO @PADRAO VALUES ('TRIBUNAL', 'CANONETIPO');
INSERT INTO @PADRAO VALUES ('TRIBUNAL', 'CANONEESTRUTURA');
INSERT INTO @PADRAO VALUES ('TRIBUNAL', 'FUNCAO');
INSERT INTO @PADRAO VALUES ('TRIBUNAL', 'GRAUINSTRUCAO');

/* ------------------------------------------- */
/* TABELAS A SEREM IGNORADAS NA INSERÇÃO */
/* ------------------------------------------- */

/* SCHEMA CEP */
INSERT INTO @IGNORAR VALUES ('CEP', 'CEPBAIRRO');
INSERT INTO @IGNORAR VALUES ('CEP', 'CEPCIDADE');
INSERT INTO @IGNORAR VALUES ('CEP', 'CEPRUA');
INSERT INTO @IGNORAR VALUES ('CEP', 'CEPTIPORUA');

/* SCHEMA DBO */
INSERT INTO @IGNORAR VALUES ('DBO', 'DIOCESES');
INSERT INTO @IGNORAR VALUES ('DBO', 'PAROQUIAS');	
INSERT INTO @IGNORAR VALUES ('DBO', '__REFACTORLOG');

/* SCHEMA PAROQUIA */
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'FUSOHORARIO');
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'ITEMMENU');
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'ITEMMENUACTIONDEPENDE');
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'ITEMMENUDEPENDE');
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'ITEMMENUDEPENDEWEB');
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'ITEMMENUDESABILITADOSSGCP');
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'ITEMMENUWEB');
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'MESSENGER');
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'PROFISSAO');
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'SCRIPTSEXECUTADOS');
INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'SISTEMA');

IF (@MIGRACAO_DIOCESANA = 'N')
BEGIN	

	/* SE NÃO FOR MIGRAR O SCHEMA CONTÁBIL */
	IF NOT EXISTS (SELECT * FROM @ESQUEMA WHERE ESQUEMA = 'DBO')
	BEGIN

		INSERT INTO @IGNORAR VALUES ('DBO', 'CLASSIFICACOES_FINANCEIRAS');
		INSERT INTO @IGNORAR VALUES ('DBO', 'CONFIGURACAOCARTAODIOCESE');
		INSERT INTO @IGNORAR VALUES ('DBO', 'CONFIGURACAOCONTAPAGAR');
		INSERT INTO @IGNORAR VALUES ('DBO', 'CONFIGURACAORETENCAO');
		INSERT INTO @IGNORAR VALUES ('DBO', 'DFC_FLUXOS');
		INSERT INTO @IGNORAR VALUES ('DBO', 'DFC_FLUXOS_CONTAS');
		INSERT INTO @IGNORAR VALUES ('DBO', 'FATOCONTABIL');
		INSERT INTO @IGNORAR VALUES ('DBO', 'HISTORICOS_CONTABIL');
		INSERT INTO @IGNORAR VALUES ('DBO', 'IMPLANTACAOSALDOCONTA');
		INSERT INTO @IGNORAR VALUES ('DBO', 'IMPLANTACAOSALDOCONTALOG');
		INSERT INTO @IGNORAR VALUES ('DBO', 'IMPOSTOSCLASSIFICACAOFINANCEIRA');
		INSERT INTO @IGNORAR VALUES ('DBO', 'PARAMETROS');
		INSERT INTO @IGNORAR VALUES ('DBO', 'PERFILPLANOCONTASPAROQUIAS');
		INSERT INTO @IGNORAR VALUES ('DBO', 'PLANO_CONTAS_CONTABIL');
		INSERT INTO @IGNORAR VALUES ('DBO', 'PLANOCONTASREGISTROI157');
		INSERT INTO @IGNORAR VALUES ('DBO', 'PREVISAO_ORCAMENTARIA');
		INSERT INTO @IGNORAR VALUES ('DBO', 'REGRARATEIOBASECALCULO');
		INSERT INTO @IGNORAR VALUES ('DBO', 'SALDOS_CONTABIL');
		INSERT INTO @IGNORAR VALUES ('DBO', 'SALDOS_CONTABIL_BANCOS');		

	END		
	ELSE BEGIN
	
		/* SCHEMA DBO */	
	
		INSERT INTO @IGNORAR VALUES ('DBO', 'CLASSIFICACOES_FINANCEIRAS');
		INSERT INTO @IGNORAR VALUES ('DBO', 'CONFIGURACAOCARTAODIOCESE');
		INSERT INTO @IGNORAR VALUES ('DBO', 'CONFIGURACAOCONTAPAGAR');
		INSERT INTO @IGNORAR VALUES ('DBO', 'CONFIGURACAORETENCAO');
		INSERT INTO @IGNORAR VALUES ('DBO', 'DFC_FLUXOS');
		INSERT INTO @IGNORAR VALUES ('DBO', 'DFC_FLUXOS_CONTAS');
		INSERT INTO @IGNORAR VALUES ('DBO', 'FATOCONTABIL');
		INSERT INTO @IGNORAR VALUES ('DBO', 'HISTORICOS_CONTABIL');
		INSERT INTO @IGNORAR VALUES ('DBO', 'IMPOSTOSCLASSIFICACAOFINANCEIRA');		
		INSERT INTO @IGNORAR VALUES ('DBO', 'PARAMETROS');
		INSERT INTO @IGNORAR VALUES ('DBO', 'PERFILPLANOCONTASPAROQUIAS');
		INSERT INTO @IGNORAR VALUES ('DBO', 'PLANO_CONTAS_CONTABIL');
		INSERT INTO @IGNORAR VALUES ('DBO', 'PLANOCONTASREGISTROI157');		
		INSERT INTO @IGNORAR VALUES ('DBO', 'PREVISAO_ORCAMENTARIA');
		INSERT INTO @IGNORAR VALUES ('DBO', 'REGRARATEIOBASECALCULO');	
	
	END
	
	/* SCHEMA DBO */
	INSERT INTO @IGNORAR VALUES ('DBO', 'MOVIMENTACAOFINANCEIRA');
	INSERT INTO @IGNORAR VALUES ('DBO', 'PREFERENCIAS');
	INSERT INTO @IGNORAR VALUES ('DBO', 'RETENCAOFAIXASINSS');
	INSERT INTO @IGNORAR VALUES ('DBO', 'RETENCAOFAIXASIRRF');

	/* SCHEMA PAROQUIA */
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'ATUALIZACAO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'CABECALHO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'CARTAO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'CARTAORECORRENCIALOG');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'CONFIGURACAO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'EMAIL');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'EMAILSERVER');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'ERROBACKGROUND');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'ESTACAO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'EXPFINANCEIRO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'FAVORITOS');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'FIELNAOVINCULADO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'IMPRESSORANAOFISCAL');	
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'LANCAMENTOLOG');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'MANUTENCAO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'PAROQUIANET');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'PAROQUIAPERMISSAO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'PAROQUIASCONTATO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'PENDENCIACONTABILIZACAO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'PENDENCIACONTABILIZACAOLOG');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'PERFILHORARIO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'RECENTES');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'RECIBO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAOBOLETO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAOCONTABILIZAR');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAODIZIMO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAOEVENTO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAOOFERTA');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAORECIBO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAOSOLICITANTE');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAOSTATUS');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAOSTATUSDETALHE');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'TRANSACAOSTATUSTIPO');
	INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'USUARIOPERFILHORARIO');
	
	-- VERIFICA SE SERÁ MANTIDO OS ANTIGOS USUÁRIOS
	IF (@CORRIGIR_THEOSDBCENTRAL = 'N')
	BEGIN
	
		INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'PERFIL');
		INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'PERFILPERMISSAO');
		INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'USUARIO');
		INSERT INTO @IGNORAR VALUES ('PAROQUIA', 'USUARIOPERFIL');
	
	END

END

/* --------------------------------------------------------------------------------------------------------------------- */		
/* CRIAÇÃO DAS TABELAS TEMPORÁRIAS COM AS TABELAS DE CHAVE PRIMÁRIA ÚNICA, GUID, CHAVES COMPOSTAS E AS TABELAS A SEREM ATUALIZADAS APÓS A INSERÇÃO */

-- PK ÚNICA
SET @QUERY = N'CREATE TABLE ##TABELAS_PK_UNICA_GUID (ESQUEMA NVARCHAR(50)
                                                    ,TABELA NVARCHAR(100)
													,_CONSTRAINT NVARCHAR(MAX))'
											   
EXECUTE SP_EXECUTESQL @QUERY

-- PK COMPOSTA
SET @QUERY = N'CREATE TABLE ##TABELAS_PK_COMPOSTA (ESQUEMA NVARCHAR(50)
                                                  ,TABELA NVARCHAR(100)
												  ,_CONSTRAINT NVARCHAR(MAX))'
											   
EXECUTE SP_EXECUTESQL @QUERY	

-- TABELAS PARA SEREM ATUALIZADAS SUAS REFERÊNCIAS
SET @QUERY = N'CREATE TABLE ##TABELAS_ATUALIZAR_REFERENCIA (ESQUEMA NVARCHAR(50)
                                                           ,TABELA NVARCHAR(100))'
											   
EXECUTE SP_EXECUTESQL @QUERY							

/* INSERT DAS TABELAS COM PK ÚNICA E GUID*/
INSERT INTO ##TABELAS_PK_UNICA_GUID ([ESQUEMA], [TABELA], [_CONSTRAINT])
SELECT UPPER(TAB1.TABLE_SCHEMA)
	  ,UPPER(TAB1.TABLE_NAME)
	  ,TAB2.CONSTRAINT_NAME
  FROM INFORMATION_SCHEMA.TABLES TAB1   
  JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB2 ON TAB2.TABLE_SCHEMA = TAB1.TABLE_SCHEMA  
   AND TAB2.TABLE_NAME = TAB1.TABLE_NAME
  JOIN @ESQUEMA TAB3 ON TAB3.ESQUEMA = TAB1.TABLE_SCHEMA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
 WHERE TAB1.TABLE_TYPE = 'BASE TABLE'
   AND TAB1.TABLE_SCHEMA + '.' + TAB1.TABLE_NAME NOT IN (SELECT ESQUEMA + '.' + TABELA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
							                               FROM @PADRAO)
   AND TAB1.TABLE_SCHEMA + '.' + TAB1.TABLE_NAME NOT IN (SELECT ESQUEMA + '.' + TABELA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
							                               FROM @IGNORAR)
   AND TAB2.CONSTRAINT_NAME LIKE 'PK_%'
 GROUP BY TAB1.TABLE_SCHEMA
		 ,TAB1.TABLE_NAME
		 ,TAB2.CONSTRAINT_NAME
HAVING COUNT (TAB2.CONSTRAINT_NAME) = 1		

		
/* INSERT DAS TABELAS COM GUID */
INSERT INTO ##TABELAS_PK_UNICA_GUID ([ESQUEMA], [TABELA], [_CONSTRAINT])
SELECT UPPER(TAB1.TABLE_SCHEMA)
	  ,UPPER(TAB1.TABLE_NAME)
	  ,NULL
  FROM INFORMATION_SCHEMA.COLUMNS TAB1
  JOIN INFORMATION_SCHEMA.TABLES TAB2 ON TAB2.TABLE_SCHEMA = TAB1.TABLE_SCHEMA
   AND TAB2.TABLE_NAME = TAB1.TABLE_NAME
  JOIN @ESQUEMA TAB3 ON TAB3.ESQUEMA = TAB1.TABLE_SCHEMA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS   
 WHERE TAB2.TABLE_TYPE = 'BASE TABLE' 
   AND TAB1.TABLE_SCHEMA + '.' + TAB1.TABLE_NAME NOT IN (SELECT ESQUEMA + '.' + TABELA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
							                               FROM @PADRAO)
   AND TAB1.TABLE_SCHEMA + '.' + TAB1.TABLE_NAME NOT IN (SELECT ESQUEMA + '.' + TABELA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
							                     FROM @IGNORAR)
   AND TAB1.TABLE_SCHEMA + '.' + TAB1.TABLE_NAME NOT IN (SELECT ESQUEMA + '.' + TABELA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
							                               FROM ##TABELAS_PK_UNICA_GUID) 	
   AND DATA_TYPE = 'UNIQUEIDENTIFIER'
 GROUP BY TAB1.TABLE_SCHEMA
		 ,TAB1.TABLE_NAME
 
 /* INSERT DAS TABELAS COM PK COMPOSTA */
INSERT INTO ##TABELAS_PK_COMPOSTA ([ESQUEMA], [TABELA], [_CONSTRAINT])
SELECT UPPER(TAB1.TABLE_SCHEMA)
	  ,UPPER(TAB1.TABLE_NAME)
	  ,TAB2.CONSTRAINT_NAME
  FROM INFORMATION_SCHEMA.TABLES TAB1 
  JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB2 ON TAB2.TABLE_SCHEMA = TAB1.TABLE_SCHEMA
   AND TAB2.TABLE_NAME = TAB1.TABLE_NAME
  JOIN @ESQUEMA TAB3 ON TAB3.ESQUEMA = TAB1.TABLE_SCHEMA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS 
 WHERE TAB1.TABLE_TYPE = 'BASE TABLE'
   AND TAB1.TABLE_SCHEMA + '.' + TAB1.TABLE_NAME NOT IN (SELECT ESQUEMA + '.' + TABELA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
							                               FROM @PADRAO)
   AND TAB1.TABLE_SCHEMA + '.' + TAB1.TABLE_NAME NOT IN (SELECT ESQUEMA + '.' + TABELA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
							                               FROM @IGNORAR)
   AND TAB2.CONSTRAINT_NAME LIKE 'PK_%'
 GROUP BY TAB1.TABLE_SCHEMA
		 ,TAB1.TABLE_NAME
		 ,TAB2.CONSTRAINT_NAME
HAVING COUNT (TAB2.CONSTRAINT_NAME) > 1	

/* ================================================================================================================================================================== */

-- PEGA TODOS OS SCHEMAS MARCADOS PARA A IMPORTAÇÃO E MONTA UMA STRING PARA PASSAR COMO PARAMETRO NOS PROCEDIMENTOS NECESSÁRIOS

SET @SCHEMA_UPDATE_DESTINO = '''' + (SELECT * 
									   FROM ((SELECT STUFF((SELECT ',' + '''''''''' + CAST(ESQUEMA AS VARCHAR) + ''''''''''
															  FROM @ESQUEMA 
														     GROUP BY ',' + '''''''''' + CAST(ESQUEMA AS VARCHAR) + ''''''''''
															   FOR XML PATH('')), 1, 1, '') AS ESQUEMA
											   FROM @ESQUEMA
											  GROUP BY ESQUEMA)) TAB1
									  GROUP BY TAB1.ESQUEMA) + ''''

/* -------------------------------------------------------------------------------------------------------------------------------------------- */
/* INÍCIO DA MIGRAÇÃO */
/* -------------------------------------------------------------------------------------------------------------------------------------------- */

PRINT 'VERIFICANDO SE EXISTE ALGUMA BASE EM INSTÂNCIA DIFERENTE...'
PRINT ''

/* VERIFICA SE AS BASES ESTÃO EM DIFERENTES INSTÂNCIAS */
IF (@INSTANCIADIFERENTE = 'S')
BEGIN

	SET @PARAMETROS = N'[' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].SYS.SP_EXECUTESQL ';
		
END
ELSE BEGIN

	SET @PARAMETROS = N'[' + @BASEDESTINO + '].SYS.SP_EXECUTESQL ';

END	
/* --------------------------------------------------------------------------------------------------------------------- */

/* DESABILITA TRIGGERS */
IF (@DESABILITA_TRIGGEREFKS = 'S')
BEGIN

	-- DESABILITA TODAS AS TRIGGERS
	PRINT 'DESABILITANDO TRIGGERS...'
	PRINT ''

	-- DESABILITA TODAS AS TRIGGERS NA BASE DE ORIGEM
	EXECUTE SP_EXECUTESQL N'SP_MSFOREACHTABLE "ALTER TABLE ? DISABLE TRIGGER ALL"'

	-- DESABILITA TODAS AS TRIGGERS NA BASE DE DESTINO
	EXECUTE @PARAMETROS N'SP_MSFOREACHTABLE "ALTER TABLE ? DISABLE TRIGGER ALL"'

END
		
/* --------------------------------------------------------------------------------------------------------------------- */

-- VALIDAÇÃO DE VERSÃO DAS BASES ANTES DE EXECUTAR O SCRIPT DE MIGRAÇÃO DE DADOS
SET @VERSAOBASEORIGEM = N'(SELECT @RESULT = CONCAT(''VERSÃO: '',VERSAO,'' CORREÇÃO: '',CORRECAO) 
							 FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].[PAROQUIA].[SISTEMA])'

EXECUTE SP_EXECUTESQL @VERSAOBASEORIGEM
					 ,N'@RESULT NVARCHAR(MAX) OUTPUT'
					 ,@RESULT = @VERSAOBASEORIGEM OUTPUT
						
SET @VERSAOBASEDESTINO = N'(SELECT @RESULT = CONCAT(''VERSÃO: '',VERSAO,'' CORREÇÃO: '',CORRECAO) 
							  FROM [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].[PAROQUIA].[SISTEMA])'

EXECUTE SP_EXECUTESQL @VERSAOBASEDESTINO
					 ,N'@RESULT NVARCHAR(MAX) OUTPUT'
					 ,@RESULT = @VERSAOBASEDESTINO OUTPUT

/* VERIFICAÇÃO DE VERSÃO DAS BASES */
IF (@VERSAOBASEORIGEM != @VERSAOBASEDESTINO)
BEGIN
	
	PRINT '*** BASES COM VERSÕES DIFERENTES, ATUALIZE AS BASES PARA A MESMA VERSÃO E EXECUTE O PROCEDIMENTO NOVAMENTE!***'
	PRINT ''
	PRINT 'BASE ORIGEM NA VERSÃO ' + @VERSAOBASEORIGEM + ''
	PRINT 'BASE DESTINO NA VERSÃO  ' + @VERSAOBASEDESTINO + ''
	PRINT ''
	
END
ELSE BEGIN

	PRINT 'CRIANDO OS PROCEDIMENTOS A SEREM USADOS NO PROCESSO DE IMPORTAÇÃO...'
	PRINT ''
	/* PROCEDIMENTO QUE FAZ A LEITURA DAS SEQUENCES COM BASE NOS PARAMETROS INFORMADOS E RETORNA ESSE VALOR PARA O PROCEDIMENTO DE CHAMADA */
	
	EXECUTE @PARAMETROS N'
	CREATE PROCEDURE [PAROQUIA].[STP_GETNEXTSEQUENCE]

	/* PARAMETROS */
	@SCHEMA VARCHAR(MAX),
	@TABELA VARCHAR(MAX),
	@BASE VARCHAR(MAX),
	@SEQUENCE INTEGER OUTPUT

	AS
	BEGIN

	SET XACT_ABORT ON
	SET NOCOUNT ON
	SET ANSI_NULLS ON
	SET QUOTED_IDENTIFIER ON

	DECLARE @SELECT NVARCHAR(MAX);        
	DECLARE @PARAMETROS NVARCHAR(MAX);    
	DECLARE @CONTADOR  NVARCHAR(MAX);     
	DECLARE @NOMESEQUENCE VARCHAR(MAX);  

	--MONTAGEM DO NOME DA SEQUENCE
	SET @NOMESEQUENCE = ''['' + @SCHEMA + ''].[''+''SEQ'' + @TABELA + '']''

	--SELECT DA SEQUENCE
	SET @SELECT = N'' SELECT @RESULT = NEXT VALUE FOR ['' + @BASE + ''].'' + @NOMESEQUENCE + '''';

	--VARIÁVEL CRIADA EM TEMPO DE EXECUÇÃO
	SET @PARAMETROS = N''@RESULT VARCHAR(30) OUTPUT'';

	EXECUTE SP_EXECUTESQL @SELECT
						 ,@PARAMETROS 
						 ,@RESULT = @CONTADOR OUTPUT;

	--RETORNO DA SEQUENCE
	SET @SEQUENCE = @CONTADOR
	RETURN @SEQUENCE

	END'			
	
	/* PROCEDIMENTO QUE FAZ A MUDANÇA DE IDDIOCESE E IDPAROQUIA EM TODAS AS TABELAS QUE EXISTE REFERÊNCIA CONFORME OS PARAMETROS INFORMADOS */
	
	EXECUTE SP_EXECUTESQL N'
	CREATE PROCEDURE [PAROQUIA].[STP_UPDATEPAROQUIADIOCESE]

	@SERVIDORDESTINO NVARCHAR(MAX), 
	@BASEDESTINO NVARCHAR(MAX), 
	@SERVIDORORIGEM NVARCHAR(MAX), 
	@BASEORIGEM NVARCHAR(MAX), 
	@TRATAORGANISMOS CHAR(1),         /* INFORME |S| PARA ATUALIZAR OS NOVOS IDS NO CAMPO IMPORTACAOID DA BASE DE ORIGEM VINCULANDO O CPNJ NAS DUAS BASES E |N| CASO NÃO SEJA NECESSÁRIO */
	@IGNORAR TABELA READONLY,        /* VARIÁVEL QUE SERÁ UTILIZADA PARA ATUALIZAR AS REFERÊNCIAS APENAS DO QUE FOR SER IMPORTADO, IGORANDO AS TABELAS PASSADAS COMO PARÂMETRO */
	@ESQUEMA ESQUEMA READONLY,        /* VARIÁVEL QUE SERÁ UTILIZADA PARA INFORMAR OS SCHEMAS A SEREM ATUALIZADOS */

	/* INFORMAR OS IDS VELHOS E OS IDS NOVOS CASO NÃO SEJA TRATADO OS ORGANISMOS E QUEIRA EXECUTAR UM A UM */
	@IDPAROQUIA_NEW INTEGER = NULL,
	@IDPAROQUIA_OLD INTEGER = NULL,
	@IDDIOCESE_NEW INTEGER = NULL,
	@IDDIOCESE_OLD INTEGER = NULL

	AS
	BEGIN
	 BEGIN TRANSACTION;  
	BEGIN TRY

	SET XACT_ABORT ON
	SET NOCOUNT ON
	SET ANSI_NULLS ON
	SET QUOTED_IDENTIFIER ON

	/* VARIÁVEIS */
	DECLARE @CAMPOFK NVARCHAR(100)
	DECLARE @TABELAFILHO NVARCHAR(100)
	DECLARE @ESQUEMAFILHO NVARCHAR(100)
	DECLARE @TABELAPAI NVARCHAR(100)
	DECLARE @QUERY NVARCHAR(MAX)

	-- VINCULANDO OS REGISTROS NAS DUAS BASES COMPARANDO PELO CNPJ
	IF (@TRATAORGANISMOS = ''S'')
	BEGIN

		/* PAROQUIAS */		
		SET @QUERY = N''UPDATE TAB1
		                   SET IMPORTACAOID = NULL
						      ,IMPORTACAOTIPO = NULL
					      FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].[DBO].PAROQUIAS TAB1''
						  
		EXECUTE SP_EXECUTESQL @QUERY
		
		SET @QUERY = N''UPDATE TAB2
						   SET TAB2.IMPORTACAOID = TAB1.ID
						  FROM ['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].[DBO].PAROQUIAS TAB1		
						  JOIN ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].[DBO].PAROQUIAS TAB2 ON TAB2.CNPJ = TAB1.CNPJ''
							   
		EXECUTE SP_EXECUTESQL @QUERY
		
		/* DIOCESES */
		SET @QUERY = N''UPDATE TAB1
		                   SET IMPORTACAOID = NULL
						      ,IMPORTACAOTIPO = NULL
					      FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].[DBO].DIOCESES TAB1''
						  
		EXECUTE SP_EXECUTESQL @QUERY
		
		SET @QUERY = N''UPDATE TAB2
						   SET TAB2.IMPORTACAOID = TAB1.ID
						  FROM ['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].[DBO].DIOCESES TAB1		
						  JOIN ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].[DBO].DIOCESES TAB2 ON TAB2.CNPJ = TAB1.CNPJ''
							   
		EXECUTE SP_EXECUTESQL @QUERY
		
	END	

	-- CURSOR QUE GRAVA TODAS AS TABELAS DEPENDENTES DAS TABELAS PAROQUIAS E DIOCESES
	DECLARE CR_PERCORRETABELASFILHO CURSOR SCROLL FOR 
	 SELECT UPPER(TAB2.COLUMN_NAME) AS CAMPOFK
		   ,UPPER(TAB2.TABLE_NAME) AS TABELAFILHO
		   ,UPPER(TAB2.TABLE_SCHEMA) AS ESQUEMAFILHO
		   ,OBJECT_NAME(REFERENCED_OBJECT_ID) AS TABELAPAI
	   FROM SYS.FOREIGN_KEYS TAB1
	   JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB2 ON TAB2.CONSTRAINT_NAME = TAB1.NAME
	   JOIN @ESQUEMA TAB3 ON TAB3.ESQUEMA = TAB2.TABLE_SCHEMA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
	  WHERE (REFERENCED_OBJECT_ID = OBJECT_ID(''DBO.PAROQUIAS'')  
		 OR REFERENCED_OBJECT_ID = OBJECT_ID(''DBO.DIOCESES''))
		AND (TAB2.TABLE_SCHEMA + ''.'' + TAB2.TABLE_NAME
		NOT IN (SELECT UPPER(ESQUEMA) + ''.'' + UPPER(TABELA) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
				  FROM @IGNORAR))
	  ORDER BY TABELAPAI
			  ,TABELAFILHO
	  
	 OPEN CR_PERCORRETABELASFILHO; 
	FETCH NEXT FROM CR_PERCORRETABELASFILHO 
	 INTO @CAMPOFK, @TABELAFILHO, @ESQUEMAFILHO, @TABELAPAI

	WHILE @@FETCH_STATUS = 0
	BEGIN

		-- UPDATE DOS CAMPOS CONFORME OS PARAMETROS INFORMADOS NA CHAMADA DO PROCEDIMENTO
		IF (@TRATAORGANISMOS = ''S'')
		BEGIN

			SET @QUERY = N''UPDATE TAB1
							   SET '' + @CAMPOFK + '' = TAB2.IMPORTACAOID
							  FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].['' + @ESQUEMAFILHO + ''].'' + @TABELAFILHO + '' TAB1	
							  JOIN ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].[DBO].'' + @TABELAPAI + '' TAB2	ON TAB2.ID = TAB1.'' + @CAMPOFK + ''
							 WHERE TAB2.IMPORTACAOID IS NOT NULL''
							   
			EXECUTE SP_EXECUTESQL @QUERY
			
		END
		ELSE IF (@TABELAPAI = ''PAROQUIAS'' AND @TRATAORGANISMOS = ''N'')
		BEGIN

			SET @QUERY = N''UPDATE TAB1
							   SET '' + @CAMPOFK + '' = '' + CAST(@IDPAROQUIA_NEW AS VARCHAR) + ''
							  FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].['' + @ESQUEMAFILHO + ''].'' + @TABELAFILHO + '' TAB1								    
							 WHERE '' + @CAMPOFK + '' = '' + CAST(@IDPAROQUIA_OLD AS VARCHAR) + ''''
							   
			EXECUTE SP_EXECUTESQL @QUERY
			
		END
		ELSE IF (@TABELAPAI = ''DIOCESES'' AND @TRATAORGANISMOS = ''N'')
		BEGIN

			SET @QUERY = N''UPDATE TAB1
							   SET '' + @CAMPOFK + '' = '' + CAST(@IDDIOCESE_NEW AS VARCHAR) + ''
							  FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].['' + @ESQUEMAFILHO + ''].'' + @TABELAFILHO + '' TAB1								    
							 WHERE '' + @CAMPOFK + '' = '' + CAST(@IDDIOCESE_OLD AS VARCHAR) + ''''
							   
			EXECUTE SP_EXECUTESQL @QUERY
		
		END
		
		-- INCREMENTA O CURSOR CR_PERCORRETABELASFILHO
		FETCH NEXT FROM CR_PERCORRETABELASFILHO 
		 INTO @CAMPOFK, @TABELAFILHO, @ESQUEMAFILHO , @TABELAPAI
		
	END				   

	CLOSE CR_PERCORRETABELASFILHO
	DEALLOCATE CR_PERCORRETABELASFILHO

	END TRY 
	 BEGIN CATCH     
	  SELECT  ERROR_NUMBER() AS ERRORNUMBER,
		ERROR_SEVERITY() AS ERRORSEVERITY,
		ERROR_STATE() AS ERRORSTATE,
		ERROR_PROCEDURE() AS ERRORPROCEDURE,
		ERROR_LINE() AS ERRORLINE,
		ERROR_MESSAGE() AS ERRORMESSAGE;
	  IF @@TRANCOUNT > 0 
			   
	   ROLLBACK TRANSACTION 

	 END CATCH;

	 IF @@TRANCOUNT > 0     
	  COMMIT TRANSACTION
	END' 	   
	
	/* PROCEDIMENTO QUE FAZ A BUSCA DA NOVA SEQUÊNCIA NA BASE DE DESTINO E GRAVA NA BASE DE ORIGEM */
	
	EXECUTE SP_EXECUTESQL N'
	CREATE PROCEDURE [PAROQUIA].[STP_UPDATENEWID]

	/* PARAMETROS */
	@SCHEMA NVARCHAR(MAX),
	@TABELA NVARCHAR(MAX),
	@BASEDESTINO NVARCHAR(MAX),
	@BASEORIGEM NVARCHAR(MAX),
	@SERVIDORORIGEM NVARCHAR(MAX),
	@SERVIDORDESTINO NVARCHAR(MAX),
	@IDDIOCESE INTEGER = NULL,                       /* QUANDO O IDPAROQUIA FOR INFORMADO, OBRIGATÓRIAMENTE INFORMAR O IDDIOCESE PARA EVITAR ERROS NAS VALIDAÇÕES DO PROCEDIMENTO */
	@IDPAROQUIA INTEGER = NULL,	
	@INSTANCIADIFERENTE CHAR(1),                     /* CAMPO CRIADO PARA DIFERENCIAR OS DADOS A SEREM TRATADOS DOS DEMAIS, POIS CORRE O RISCO DO IMPORTACAOID SE REPETIR */
	@WHERE NVARCHAR(MAX) = NULL	

	AS
	BEGIN
	 BEGIN TRANSACTION;  
	BEGIN TRY

	SET XACT_ABORT ON
	SET NOCOUNT ON
	SET ANSI_NULLS ON
	SET QUOTED_IDENTIFIER ON

	/* VARIÁVEIS */
	DECLARE @SEQUENCE INTEGER;            
	DECLARE @SELECT NVARCHAR(MAX);         
	DECLARE @DECLARACURSOR NVARCHAR(MAX);   
	DECLARE @PARAMETROS NVARCHAR(MAX);    
	DECLARE @ID INTEGER;                   
	DECLARE @QUERY NVARCHAR(MAX);   
	DECLARE @CAMPOPK NVARCHAR(MAX);
	DECLARE @CAMPOFK NVARCHAR(MAX);
	DECLARE @PAROQUIAFK_NULL BIT = 1;
	DECLARE @DIOCESEFK_NULL BIT = 1;

	-- VERIFICA SE A TABELA INFORMADA NAO TEM CHAVE PRIMÁRIA COMPOSTA
	IF (SELECT COUNT(TAB1.COLUMN_NAME)
		  FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB1
		 WHERE TAB1.TABLE_NAME = '''' + @TABELA + ''''
		   AND TAB1.CONSTRAINT_SCHEMA = '''' + @SCHEMA + ''''
		   AND TAB1.CONSTRAINT_NAME LIKE ''PK_%'') = 1
	BEGIN 

		-- GUARDA O CAMPO PRIMARY KEY DA TABELA INFORMADA
		SET @QUERY = N''SELECT @RESULT = TAB1.COLUMN_NAME
						  FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB1
						 WHERE TAB1.TABLE_NAME = '''''' + @TABELA + ''''''
						   AND TAB1.CONSTRAINT_SCHEMA = '''''' + @SCHEMA + ''''''
						   AND TAB1.CONSTRAINT_NAME LIKE ''''PK_%''''''

		EXECUTE SP_EXECUTESQL @QUERY
							 ,N''@RESULT NVARCHAR(50) OUTPUT''
							 ,@RESULT = @CAMPOPK OUTPUT
							 
		-- SELECIONA OS REGISTROS EXISTENTES DA TABELA PARA ATUALIZAR COM OS NOVOS IDS
		SET @QUERY = N''SELECT '' + @CAMPOPK + ''
						  FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].['' + @SCHEMA + ''].'' + @TABELA + ''''						 
							 
		IF (@WHERE IS NOT NULL)
		BEGIN
		
			SET @QUERY = @QUERY + '' '' + @WHERE + ''''
		
		END
		
		IF (@IDPAROQUIA IS NOT NULL)
		BEGIN
			
			-- GRAVA NO CURSOR TODAS AS TABELAS QUE FAZEM REFERÊNCIA NA TABELA INFORMADA NO PARÂMETRO QUE TENHAM REFERÊNCIA TAMBÉM NA TABELA PARÓQUIAS
			SET @SELECT = N''SELECT UPPER(TAB2.COLUMN_NAME) AS CAMPOFK
							   FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].SYS.FOREIGN_KEYS TAB1
							   JOIN ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB2 ON TAB2.CONSTRAINT_NAME = TAB1.NAME
							  WHERE REFERENCED_OBJECT_ID = OBJECT_ID(''''DBO.PAROQUIAS'''')
								AND OBJECT_NAME(PARENT_OBJECT_ID) = '''''' + @TABELA + ''''''
								AND SCHEMA_NAME(SCHEMA_ID) = '''''' + @SCHEMA + ''''''''
								   
			SET @DECLARACURSOR = N''DECLARE CR_PERCORRETABELASFILHO CURSOR SCROLL FOR '' + @SELECT + '';
									   OPEN CR_PERCORRETABELASFILHO; 
									  FETCH NEXT FROM CR_PERCORRETABELASFILHO 
									   INTO @RESULT_CAMPOFK''
									  
			SET @PARAMETROS = N''@RESULT_CAMPOFK NVARCHAR(100) OUTPUT''

			EXECUTE SP_EXECUTESQL @DECLARACURSOR
								 ,@PARAMETROS
								 ,@RESULT_CAMPOFK = @CAMPOFK OUTPUT
								 
			WHILE @@FETCH_STATUS = 0
			BEGIN
								 
				IF (@CAMPOFK IS NOT NULL)
				BEGIN
				
					SET @PAROQUIAFK_NULL = 0
					
					SET @QUERY = @QUERY + '' AND '' + @CAMPOFK + '' = '' + CAST(@IDPAROQUIA AS VARCHAR)
				
				END
			
				-- INCREMENTA O CURSOR CR_CAMPOSFK
				FETCH NEXT FROM CR_PERCORRETABELASFILHO 
				 INTO @CAMPOFK
				
			END
			
			CLOSE CR_PERCORRETABELASFILHO
			DEALLOCATE CR_PERCORRETABELASFILHO
			
		END
		
		IF (@IDDIOCESE IS NOT NULL)
		BEGIN
			
			-- GRAVA NO CURSOR TODAS AS TABELAS QUE FAZEM REFERÊNCIA NA TABELA INFORMADA NO PARÂMETRO QUE TENHAM REFERÊNCIA TAMBÉM NA TABELA DIOCESES
			SET @SELECT = N''SELECT UPPER(TAB2.COLUMN_NAME) AS CAMPOFK
							   FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].SYS.FOREIGN_KEYS TAB1
							   JOIN ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB2 ON TAB2.CONSTRAINT_NAME = TAB1.NAME
							  WHERE REFERENCED_OBJECT_ID = OBJECT_ID(''''DBO.DIOCESES'''')
								AND OBJECT_NAME(PARENT_OBJECT_ID) = '''''' + @TABELA + ''''''
								AND SCHEMA_NAME(SCHEMA_ID) = '''''' + @SCHEMA + ''''''''							
								   
			SET @DECLARACURSOR = N''DECLARE CR_PERCORRETABELASFILHO CURSOR SCROLL FOR '' + @SELECT + '';
									   OPEN CR_PERCORRETABELASFILHO; 
									  FETCH NEXT FROM CR_PERCORRETABELASFILHO 
									   INTO @RESULT_CAMPOFK''
									  
			SET @PARAMETROS = N''@RESULT_CAMPOFK NVARCHAR(100) OUTPUT''

			EXECUTE SP_EXECUTESQL @DECLARACURSOR
								 ,@PARAMETROS
								 ,@RESULT_CAMPOFK = @CAMPOFK OUTPUT
								 
			WHILE @@FETCH_STATUS = 0
			BEGIN
								 
				IF (@CAMPOFK IS NOT NULL)
				BEGIN
				
					SET @DIOCESEFK_NULL = 0
					
					SET @QUERY = @QUERY + '' AND '' + @CAMPOFK + '' = '' + CAST(@IDDIOCESE AS VARCHAR)
				
				END
				
				-- INCREMENTA O CURSOR CR_CAMPOSFK
				FETCH NEXT FROM CR_PERCORRETABELASFILHO 
				 INTO @CAMPOFK
				
			END
			
			CLOSE CR_PERCORRETABELASFILHO
			DEALLOCATE CR_PERCORRETABELASFILHO		
		
		END
		
		/* CASO OS PARÂMETROS DE IDDIOCESE E/OU IDPAROQUIA SEJAM PASSADOS E OS CAMPOS DE REFERÊNCIA NA TABELA NÃO EXISTA, O PROCEDIMENTO NAO É FEITO, SOMENTE SE EXISTIR AS REFERÊNCIAS RECEBIDAS,
		   SE NÃO FOR INFORMADO ESSES PARAMETROS, É FEITO PARA TODOS OS DADOS DA TABELA */
			
		IF ((@IDPAROQUIA IS NOT NULL AND @PAROQUIAFK_NULL = 0) OR
			(@IDDIOCESE IS NOT NULL AND @DIOCESEFK_NULL = 0) OR
			(@IDPAROQUIA IS NULL AND @PAROQUIAFK_NULL = 1) OR
			(@IDDIOCESE IS NULL AND @DIOCESEFK_NULL = 1))
		
		BEGIN	
		
			-- CURSOR QUE PERCORRERÁ TODOS OS REGISTROS FAZENDO O UPDATE DOS NOVOS IDS
			SET @DECLARACURSOR = N'' DECLARE CR_UPDATENEWID CURSOR SCROLL FOR '' + @QUERY + ''; 
										OPEN CR_UPDATENEWID; 
									   FETCH NEXT FROM CR_UPDATENEWID INTO @RESULT''

			SET @PARAMETROS = N''@RESULT INTEGER OUTPUT''

			EXECUTE SP_EXECUTESQL @DECLARACURSOR
								 ,@PARAMETROS
								 ,@ID OUTPUT

			WHILE @@FETCH_STATUS = 0
			BEGIN			

				--SET DOS PARAMETROS
					SET @PARAMETROS = N'''''''' + @SCHEMA + ''''''
									  ,'''''' + @TABELA + ''''''
									  ,'''''' + @BASEDESTINO + ''''''
									  ,@RESULT OUTPUT''
																			   
				IF (@INSTANCIADIFERENTE = ''N'')
				BEGIN					
						
					SET @PARAMETROS = ''EXECUTE ['' + @BASEDESTINO + ''].'' + @SCHEMA + ''.STP_GETNEXTSEQUENCE '' + @PARAMETROS
						
				END
				ELSE BEGIN						
				
					SET @QUERY = N''EXEC ['' + @BASEDESTINO + ''].['' + @SCHEMA + ''].STP_GETNEXTSEQUENCE @SCHEMA = ?
																										 ,@TABELA = ?
																										 ,@BASE = ?
																										 ,@SEQUENCE = ? OUTPUT''
																						
					SET @PARAMETROS = N''EXECUTE ('''''' + @QUERY + ''''''
												 ,'' + @PARAMETROS + '') AT ['' + @SERVIDORDESTINO + '']''
				
				END
											   
				EXECUTE SP_EXECUTESQL @PARAMETROS
									 ,N''@RESULT INTEGER OUTPUT''
									 ,@RESULT = @SEQUENCE OUTPUT

				--MONTAGEM DO UPDATE DOS DADOS QUE VÃO RECEBER O NOVO ID PARA INSERÇÃO NO DESTINO
				SET @QUERY = N''UPDATE ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].['' + @SCHEMA + ''].['' + @TABELA + '']
								   SET IMPORTACAOID = '' + CAST(@SEQUENCE AS VARCHAR) + ''
								 WHERE '' + @CAMPOPK + '' = '' + CAST(@ID AS VARCHAR) + ''''

				EXECUTE SP_EXECUTESQL @QUERY

				FETCH NEXT FROM CR_UPDATENEWID
				 INTO @ID;
				
			END

			CLOSE CR_UPDATENEWID;
			DEALLOCATE CR_UPDATENEWID;	
			
		END
	END

	END TRY 
	 BEGIN CATCH     
	  SELECT ERROR_NUMBER() AS ERRORNUMBER,
		ERROR_SEVERITY() AS ERRORSEVERITY,
		ERROR_STATE() AS ERRORSTATE,
		ERROR_PROCEDURE() AS ERRORPROCEDURE,
		ERROR_LINE() AS ERRORLINE,
		ERROR_MESSAGE() AS ERRORMESSAGE;     

	  IF @@TRANCOUNT > 0         
	   ROLLBACK TRANSACTION; 

	 END CATCH;

	 IF @@TRANCOUNT > 0
	  COMMIT TRANSACTION;
	END'
	
	/* PROCEDIMENTO DE DE_PARA CONTÁBIL */
	
	EXECUTE SP_EXECUTESQL N'
	CREATE PROCEDURE PAROQUIA.STP_DE_PARA
	
	@SERVIDORDESTINO NVARCHAR(100),
	@BASEDESTINO NVARCHAR(100),
	@SERVIDORORIGEM NVARCHAR(100),
	@BASEORIGEM NVARCHAR(100),
	@IGNORAR TABELA READONLY,        /* VARIÁVEL QUE SERÁ UTILIZADA PARA ATUALIZAR AS REFERÊNCIAS APENAS DO QUE FOR SER IMPORTADO, IGORANDO AS TABELAS PASSADAS COMO PARÂMETRO */
	@ESQUEMA ESQUEMA READONLY        /* VARIÁVEL QUE SERÁ UTILIZADA PARA INFORMAR OS SCHEMAS A SEREM ATUALIZADOS */
	
	AS
	BEGIN
	BEGIN TRANSACTION
	BEGIN TRY

	SET XACT_ABORT ON
	SET NOCOUNT ON
	SET ANSI_NULLS ON
	SET QUOTED_IDENTIFIER ON

	DECLARE @QUERY NVARCHAR(MAX)
	DECLARE @SCHEMA NVARCHAR(50)
	DECLARE @SCHEMAFILHO NVARCHAR(50)
	DECLARE @TABELA NVARCHAR(100)
	DECLARE @TABELAFILHO NVARCHAR(100)
	DECLARE @CAMPOFK NVARCHAR(100)
	
	/* PLANO_CONTAS_CONTABIL */
	
	-- ATUALIZANDO O CAMPO IMPORTACAOID COM O NOVO ID A SER USADO
	SET @QUERY = N''UPDATE TAB1
	                   SET IMPORTACAOID = TAB3.ID
					  FROM ['' + @BASEORIGEM + ''].DBO.PLANO_CONTAS_CONTABIL TAB1
					  JOIN ['' + @BASEORIGEM + ''].DBO.DE_PARA_PLANO_CONTAS_CONTABIL TAB2 ON TAB2.CODIGO = TAB1.CODIGO
					  JOIN ['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].DBO.PLANO_CONTAS_CONTABIL TAB3 ON TAB3.CODIGO = TAB2.DE_PARA
					 WHERE TAB2.DE_PARA IS NOT NULL''
					 
	EXECUTE (@QUERY)
					 
	-- ATUALIZANDO O CAMPO IMPORTACAOID DAS CONTAS QUE AINDA NAO FORAM ATUALIZADAS COM O NOVO ID A SER USADO
	SET @QUERY = N''UPDATE TAB1
	                   SET IMPORTACAOID = TAB2.ID
					  FROM ['' + @BASEORIGEM + ''].DBO.PLANO_CONTAS_CONTABIL TAB1
					  JOIN ['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].DBO.PLANO_CONTAS_CONTABIL TAB2 ON TAB2.CODIGO = TAB1.CODIGO
					 WHERE TAB1.IMPORTACAOID IS NULL  
					   AND TAB1.CODIGO IS NOT NULL''
					   
	EXECUTE (@QUERY)
					   
	/* HISTORICOS_CONTABIL */
	
	-- ATUALIZANDO O CAMPO IMPORTACAOID COM O NOVO ID A SER USADO
	SET @QUERY = N''UPDATE TAB1
	                   SET IMPORTACAOID = TAB3.ID
					  FROM ['' + @BASEORIGEM + ''].DBO.HISTORICOS_CONTABIL TAB1
					  JOIN ['' + @BASEORIGEM + ''].DBO.DE_PARA_HISTORICOS_CONTABIL TAB2 ON TAB2.CODIGO = TAB1.CODIGO
					  JOIN ['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].DBO.HISTORICOS_CONTABIL TAB3 ON TAB3.CODIGO = TAB2.DE_PARA
					 WHERE TAB2.DE_PARA IS NOT NULL''
					 
	EXECUTE (@QUERY)
					 
	-- ATUALIZANDO O CAMPO IMPORTACAOID DAS CONTAS QUE AINDA NAO FORAM ATUALIZADAS COM O NOVO ID A SER USADO
	SET @QUERY = N''UPDATE TAB1
	                   SET IMPORTACAOID = TAB2.ID
					  FROM ['' + @BASEORIGEM + ''].DBO.HISTORICOS_CONTABIL TAB1
					  JOIN ['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].DBO.HISTORICOS_CONTABIL TAB2 ON TAB2.CODIGO = TAB1.CODIGO
					 WHERE TAB1.IMPORTACAOID IS NULL  
					   AND TAB1.CODIGO IS NOT NULL''
					   
	EXECUTE (@QUERY)
					   
	/* CLASSIFICACOES_FINANCEIRAS */
	
	-- ATUALIZANDO O CAMPO IMPORTACAOID COM O NOVO ID A SER USADO
	SET @QUERY = N''UPDATE TAB1
	                   SET IMPORTACAOID = TAB2.DE_PARA
					  FROM ['' + @BASEORIGEM + ''].DBO.CLASSIFICACOES_FINANCEIRAS TAB1
					  JOIN ['' + @BASEORIGEM + ''].DBO.DE_PARA_CLASSIFICACOES_FINANCEIRAS TAB2 ON TAB2.CODIGO_OLD = TAB1.ID
					 WHERE TAB2.DE_PARA IS NOT NULL''
					 
	EXECUTE (@QUERY)
		
	-- TABELAS PARA SEREM ATUALIZADAS SUAS REFERÊNCIAS
	SET @QUERY = N''CREATE TABLE ##TABELAS_DE_PARA (ESQUEMA NVARCHAR(50)
												   ,TABELA NVARCHAR(100))''
												   
	EXECUTE (@QUERY)
												   
	INSERT INTO ##TABELAS_DE_PARA VALUES (''DBO'',''PLANO_CONTAS_CONTABIL'')
	INSERT INTO ##TABELAS_DE_PARA VALUES (''DBO'',''CLASSIFICACOES_FINANCEIRAS'')
	INSERT INTO ##TABELAS_DE_PARA VALUES (''DBO'',''HISTORICOS_CONTABIL'')
	
	-- CURSOR COM AS TABELAS A SEREM ATUALIZADAS
	SET @QUERY = N''DECLARE CR_TABELAS CURSOR SCROLL FOR
					 SELECT ESQUEMA
					       ,TABELA
					   FROM ##TABELAS_DE_PARA
							  
					OPEN CR_TABELAS; 
				   FETCH NEXT FROM CR_TABELAS 
					INTO @SCHEMA, @TABELA''

	EXECUTE SP_EXECUTESQL @QUERY
						 ,N''@SCHEMA NVARCHAR(50) OUTPUT
						    ,@TABELA NVARCHAR(100) OUTPUT''
						 ,@SCHEMA OUTPUT
						 ,@TABELA OUTPUT	

	WHILE @@FETCH_STATUS = 0
	BEGIN
	
		-- CURSOR COM AS TABELAS DEPENDENTES DA TABELA
		SET @QUERY = N''DECLARE CR_DEPENDENCIAS CURSOR SCROLL FOR
						 SELECT UPPER(TAB2.TABLE_SCHEMA) AS SCHEMAFILHO
						       ,UPPER(TAB2.TABLE_NAME) AS TABELAFILHO							   
							   ,UPPER(TAB2.COLUMN_NAME) AS CAMPOFK
						   FROM SYS.FOREIGN_KEYS TAB1
						   JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB2 ON TAB2.CONSTRAINT_NAME = TAB1.NAME
						   JOIN @ESQUEMA TAB3 ON TAB3.ESQUEMA = TAB2.TABLE_SCHEMA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
						  WHERE REFERENCED_OBJECT_ID = OBJECT_ID('''''' + @SCHEMA + ''.'' + @TABELA + '''''')
						    AND TAB2.TABLE_SCHEMA + ''''.'''' + TAB2.TABLE_NAME NOT IN (SELECT UPPER(ESQUEMA) + ''''.'''' + UPPER(TABELA) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
				                                                                          FROM @IGNORAR)
						  GROUP BY TAB2.TABLE_NAME
								  ,TAB2.TABLE_SCHEMA
								  ,TAB2.COLUMN_NAME
								  
						OPEN CR_DEPENDENCIAS; 
					   FETCH NEXT FROM CR_DEPENDENCIAS 
						INTO @SCHEMAFILHO, @TABELAFILHO, @CAMPOFK''

		EXECUTE SP_EXECUTESQL @QUERY
							 ,N''@SCHEMAFILHO NVARCHAR(50) OUTPUT
							    ,@TABELAFILHO NVARCHAR(100) OUTPUT
								,@CAMPOFK NVARCHAR(100) OUTPUT
								,@IGNORAR TABELA READONLY
								,@ESQUEMA ESQUEMA READONLY''
							 ,@SCHEMAFILHO OUTPUT
							 ,@TABELAFILHO OUTPUT
							 ,@CAMPOFK OUTPUT	
							 ,@IGNORAR
							 ,@ESQUEMA
							 
		WHILE @@FETCH_STATUS = 0
		BEGIN
		
			-- UPDATE DAS REFERÊNCIAS
			SET @QUERY = N''UPDATE TAB1
							   SET '' + @CAMPOFK + '' = TAB2.IMPORTACAOID
							  FROM ['' + @BASEORIGEM + ''].'' + @SCHEMAFILHO + ''.'' + @TABELAFILHO + '' TAB1
							  JOIN ['' + @BASEORIGEM + ''].'' + @SCHEMA + ''.'' + @TABELA + '' TAB2 ON TAB2.ID = TAB1.'' + @CAMPOFK + ''
							 WHERE TAB2.IMPORTACAOID IS NOT NULL''

			EXECUTE (@QUERY)	
		
			FETCH NEXT FROM CR_DEPENDENCIAS 
			 INTO @SCHEMAFILHO, @TABELAFILHO, @CAMPOFK
		
		END
		
		CLOSE CR_DEPENDENCIAS
		DEALLOCATE CR_DEPENDENCIAS
	
		FETCH NEXT FROM CR_TABELAS 
		 INTO @SCHEMA, @TABELA
	
	END
					 
	CLOSE CR_TABELAS
	DEALLOCATE CR_TABELAS
	
	END TRY 
	 BEGIN CATCH     
		  SELECT ERROR_NUMBER() AS ERRORNUMBER,
				 ERROR_SEVERITY() AS ERRORSEVERITY,
				 ERROR_STATE() AS ERRORSTATE,
				 ERROR_PROCEDURE() AS ERRORPROCEDURE,
				 ERROR_LINE() AS ERRORLINE,
				 ERROR_MESSAGE() AS ERRORMESSAGE
		
	IF @@TRANCOUNT > 0         
	   ROLLBACK TRANSACTION

	END CATCH;

	IF @@TRANCOUNT > 0
	  COMMIT TRANSACTION
	END'
	
	/* PROCEDIMENTO QUE FAZ O UPDATE DAS REFERÊNCIAS DA TABELA INFORMADA */
	
	EXECUTE @PARAMETROS N'
	CREATE PROCEDURE [PAROQUIA].[STP_UPDATEREFERENCIAS]

	/* PARAMETROS */
	@SCHEMA NVARCHAR(50),
	@TABELAPAI NVARCHAR(100), 
	@BASEDESTINO NVARCHAR(100),
	@BASEORIGEM NVARCHAR(100),
	@SERVIDORDESTINO NVARCHAR(100),
	@SERVIDORORIGEM NVARCHAR(100),
	@ESQUEMAS NVARCHAR(MAX),
	@INSTANCIADIFERENTE CHAR(1),
	@TRATAMENTO NVARCHAR(20),                /* CAMPO CRIADO PARA DIFERENCIAR OS DADOS A SEREM TRATADOS DOS DEMAIS, POIS CORRE O RISCO DO IMPORTACAOID E IMPORTCAOTIPO SE REPETIR */
	@IMPORTACAOTIPO NVARCHAR(20)	

	AS
	BEGIN
	 BEGIN TRANSACTION   
	BEGIN TRY

	SET XACT_ABORT ON
	SET NOCOUNT ON
	SET ANSI_NULLS ON
	SET QUOTED_IDENTIFIER ON

	/* VARIÁVEIS LOCAIS */
	DECLARE @TABELAFILHO NVARCHAR(100)
	DECLARE @SCHEMAFILHO NVARCHAR(50)
	DECLARE @CAMPOPK NVARCHAR(100)
	DECLARE @CAMPOFK NVARCHAR(100)
	DECLARE @QUERY NVARCHAR(MAX)

	--VERIFICA SE A TABELA TEM UMA ÚNICA PK
	IF(SELECT COUNT(CONSTRAINT_NAME)
		 FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
		WHERE CONSTRAINT_NAME LIKE ''PK_%''
		  AND TABLE_SCHEMA = '''' + @SCHEMA + ''''
		  AND TABLE_NAME = '''' + @TABELAPAI + '''') = 1
	BEGIN

		-- GUARDA O NOME DO CAMPO PK
		SET @CAMPOPK = (SELECT COLUMN_NAME
						  FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
						 WHERE CONSTRAINT_NAME LIKE ''PK_%''
						   AND TABLE_SCHEMA = '''' + @SCHEMA + ''''
						   AND TABLE_NAME = '''' + @TABELAPAI + '''')

		-- CURSOR COM AS TABELAS DEPENDENTES
		SET @QUERY = N''DECLARE CR_PERCORRETABELASFILHO CURSOR SCROLL FOR
		                 SELECT UPPER(TAB2.TABLE_NAME) AS TABELAFILHO
							   ,UPPER(TAB2.TABLE_SCHEMA) AS SCHEMAFILHO
							   ,UPPER(TAB2.COLUMN_NAME) AS CAMPOFK
						   FROM SYS.FOREIGN_KEYS TAB1
						   JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB2 ON TAB2.CONSTRAINT_NAME = TAB1.NAME
						  WHERE REFERENCED_OBJECT_ID = OBJECT_ID('''''' + @SCHEMA + ''.'' + @TABELAPAI + '''''') 
							AND TAB2.TABLE_SCHEMA IN ('' + @ESQUEMAS + '')
						  GROUP BY TAB2.TABLE_NAME
								  ,TAB2.TABLE_SCHEMA
								  ,TAB2.COLUMN_NAME
								  
					    OPEN CR_PERCORRETABELASFILHO; 
					   FETCH NEXT FROM CR_PERCORRETABELASFILHO 
						INTO @TABELAFILHO, @SCHEMAFILHO, @CAMPOFK''

		EXECUTE SP_EXECUTESQL @QUERY
		                     ,N''@TABELAFILHO NVARCHAR(100) OUTPUT
							    ,@SCHEMAFILHO NVARCHAR(50) OUTPUT
								,@CAMPOFK NVARCHAR(100) OUTPUT''
						     ,@TABELAFILHO OUTPUT
							 ,@SCHEMAFILHO OUTPUT
							 ,@CAMPOFK OUTPUT		 

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @QUERY = NULL

			--VERIFICA SE A TABELAFILHO TEM UMA ÚNICA PK (SE TIVER CHAVE ÚNICA, JÁ FOI INSERIDA NO DESTINO, SE FOR COMPOSTA, SERÁ INSERIDA APÓS A ATUALIZAÇÃO DAS REFERÊNCIAS)
			IF(SELECT COUNT(CONSTRAINT_NAME)
				 FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
				WHERE CONSTRAINT_NAME LIKE ''PK_%''
				  AND TABLE_SCHEMA = '''' + @SCHEMAFILHO + ''''
				  AND TABLE_NAME = '''' + @TABELAFILHO + '''') <= 1
			BEGIN
			
				-- VALIDAÇÃO SE EXISTE AUTOREFERÊNCIA
				IF (@TABELAPAI = @TABELAFILHO)
				BEGIN
						
					IF (@CAMPOPK != @CAMPOFK)
					BEGIN

						-- UPDATE DO CAMPOFK PARA O NOVOID NA QUE SERÁ USADO NA BASE DE DESTINO
						SET @QUERY = N''UPDATE TAB1
										   SET '' + @CAMPOFK + '' = '' + @CAMPOPK + ''
										  FROM ['' + @BASEDESTINO + ''].'' + @SCHEMAFILHO + ''.'' + @TABELAFILHO + '' TAB1								    
										 WHERE TAB1.'' + @CAMPOFK + '' = TAB1.IMPORTACAOID
										   AND TAB1.TRATAMENTO_ = '''''' + @TRATAMENTO + ''''''
										   AND TAB1.IMPORTACAOTIPO = '''''' + @IMPORTACAOTIPO + ''''''''
										  
					END
				END
				ELSE BEGIN				
					
					-- UPDATE DAS TABELAS FILHOS JÁ INSERIDAS NO SERVIDOR DE DESTINO
					SET @QUERY = N''UPDATE TAB1
								   SET '' + @CAMPOFK + '' = TAB2.'' + @CAMPOPK + ''
								  FROM ['' + @BASEDESTINO + ''].'' + @SCHEMAFILHO + ''.'' + @TABELAFILHO + '' TAB1
								  JOIN ['' + @BASEDESTINO + ''].'' + @SCHEMA + ''.'' + @TABELAPAI + '' TAB2 ON TAB2.IMPORTACAOID = TAB1.'' + @CAMPOFK + ''
								   AND TAB1.TRATAMENTO_ = TAB2.TRATAMENTO_
								 WHERE TAB2.IMPORTACAOID IS NOT NULL
								   AND TAB2.TRATAMENTO_ = '''''' + @TRATAMENTO + ''''''
								   AND TAB2.IMPORTACAOTIPO = '''''' + @IMPORTACAOTIPO + ''''''''
				
				END				

			END
			ELSE BEGIN
			
				-- UPDATE DAS TABELAS FILHOS QUE AINDA NÃO FORAM INSERIDAS NO SERVIDOR DE DESTINO				   
				SET @QUERY = N''UPDATE TAB1
								   SET '' + @CAMPOFK + '' = TAB2.'' + @CAMPOPK + ''
								  FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].'' + @SCHEMAFILHO + ''.'' + @TABELAFILHO + '' TAB1
								  JOIN ['' + @BASEDESTINO + ''].'' + @SCHEMA + ''.'' + @TABELAPAI + '' TAB2 ON TAB2.IMPORTACAOID = TAB1.'' + @CAMPOFK + ''
								   AND TAB1.TRATAMENTO_ = TAB2.TRATAMENTO_
								 WHERE TAB2.IMPORTACAOID IS NOT NULL
								   AND TAB2.TRATAMENTO_ = '''''' + @TRATAMENTO + ''''''
								   AND TAB2.IMPORTACAOTIPO = '''''' + @IMPORTACAOTIPO + ''''''''
				
				/*
				-- UPDATE DAS TABELAS FILHOS QUE AINDA NÃO FORAM INSERIDAS NO SERVIDOR DE DESTINO (CORREÇÃO DE UM PROBLEMA DE PERFORMANCE)				   
				SET @QUERY = N''UPDATE TAB1
								   SET '' + @CAMPOFK + '' = TAB2.'' + @CAMPOPK + ''
								  FROM OPENQUERY (['' + @SERVIDORORIGEM + ''], ''''SELECT '' + @CAMPOFK + ''
								                                                         ,TRATAMENTO_
																			         FROM ['' + @BASEORIGEM + ''].'' + @SCHEMAFILHO + ''.'' + @TABELAFILHO + '''''') TAB1
								  JOIN ['' + @BASEDESTINO + ''].'' + @SCHEMA + ''.'' + @TABELAPAI + '' TAB2 ON TAB2.IMPORTACAOID = TAB1.'' + @CAMPOFK + ''
								   AND TAB1.TRATAMENTO_ = TAB2.TRATAMENTO_
								 WHERE TAB2.IMPORTACAOID IS NOT NULL
								   AND TAB2.TRATAMENTO_ = '''''' + @TRATAMENTO + ''''''
								   AND TAB2.IMPORTACAOTIPO = '''''' + @IMPORTACAOTIPO + ''''''''
				*/					
			END
			
			EXECUTE SP_EXECUTESQL @QUERY

			-- INCREMENTA O CURSOR CR_PERCORRETABELASFILHO
			FETCH NEXT FROM CR_PERCORRETABELASFILHO 
			 INTO @TABELAFILHO, @SCHEMAFILHO, @CAMPOFK	

		END
			
		-- FECHA E DESALOCA O CURSOR CR_PERCORRETABELASFILHO
		CLOSE CR_PERCORRETABELASFILHO
		DEALLOCATE CR_PERCORRETABELASFILHO		
			
	END

	END TRY 
	 BEGIN CATCH     
	  SELECT  ERROR_NUMBER() AS ERRORNUMBER,
		ERROR_SEVERITY() AS ERRORSEVERITY,
		ERROR_STATE() AS ERRORSTATE,
		ERROR_PROCEDURE() AS ERRORPROCEDURE,
		ERROR_LINE() AS ERRORLINE,
		ERROR_MESSAGE() AS ERRORMESSAGE;
	  IF @@TRANCOUNT > 0 
			   
	   ROLLBACK TRANSACTION 

	 END CATCH;

	 IF @@TRANCOUNT > 0     
	  COMMIT TRANSACTION
	END'
	
	/* PROCEDIMENTO QUE FAZ O INSERT DAS TABELAS */
	
	EXECUTE @PARAMETROS N'
	CREATE PROCEDURE [PAROQUIA].[STP_INSERTNEWDATABASE]

	@SCHEMA NVARCHAR(50),
	@TABELA NVARCHAR(100),
	@BASEDESTINO NVARCHAR(100),
	@BASEORIGEM NVARCHAR(100),
	@SERVIDORORIGEM NVARCHAR(100),
	@TIPOIMPORTACAO BIT,                                         /* 0 - IMPORTAR OS DADOS TRATANDO OS IDS A SEREM INSERIDOS | 1 - EXTRAIR OS DADOS SEM TRATAMENTO DE ID */
	@IMPORTACAOTIPO NVARCHAR(MAX) = NULL,                        /* CASO O TIPOIMPORTACAO SEJA 1, NÃO É FEITO A INSERÇÃO DO IMPORTAÇÃO TIPO, SE FOR 0, É OBRIGATÓRIO INFORMAR */
	@CONDICAO NVARCHAR(MAX) = NULL,
	@MERGE BIT = NULL                                            /* 0 - PARA NÃO FAZER MERGE | 1 - FAZER MERGE */

	AS
	BEGIN
	BEGIN TRANSACTION;  
	BEGIN TRY

	SET XACT_ABORT ON
	SET NOCOUNT ON
	SET ANSI_NULLS ON
	SET QUOTED_IDENTIFIER ON

	DECLARE @QUERY NVARCHAR(MAX)
	DECLARE @NOMECAMPO NVARCHAR(MAX)
	DECLARE @CAMPOINSERT NVARCHAR(MAX) = ''''
	DECLARE @CAMPOSELECT NVARCHAR(MAX) = ''''
	DECLARE @OPENQUERY NVARCHAR(MAX) = ''''
	DECLARE @CONTADOR INTEGER
	DECLARE @CAMPOPK NVARCHAR(MAX)
	DECLARE @IDENTITY NVARCHAR(MAX)
	DECLARE @CAMPOPK2 NVARCHAR(MAX)
	
	-- SETA O VALOR DEFAULT
	IF @MERGE IS NULL SET @MERGE = 0

	-- MIGRAR OS DADOS TRATANDO OS IDS
	IF(@TIPOIMPORTACAO = 0)
	BEGIN

		-- VERIFICA SE A TABELA TEM UMA ÚNICA PK
		IF(SELECT COUNT(CONSTRAINT_NAME)
			 FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
			WHERE CONSTRAINT_NAME LIKE ''PK_%''
			  AND TABLE_SCHEMA = '''' + @SCHEMA + ''''
			  AND TABLE_NAME = '''' + @TABELA + '''') = 1
		BEGIN			

			-- GUARDA O NOME DO CAMPO PK
			SET @CAMPOPK = (SELECT COLUMN_NAME
							  FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
							 WHERE CONSTRAINT_NAME LIKE ''PK_%''
							   AND TABLE_SCHEMA = '''' + @SCHEMA + ''''
							   AND TABLE_NAME = '''' + @TABELA + '''')

			-- GUARDA A QUANTIDADE DE CAMPOS DA TABELA INFORMADA NO PARAMETRO
			SET @CONTADOR = (SELECT MAX(ORDINAL_POSITION)
							   FROM INFORMATION_SCHEMA.COLUMNS TAB1
							  WHERE TAB1.TABLE_SCHEMA = '''' + @SCHEMA + ''''
								AND TAB1.TABLE_NAME = '''' + @TABELA + '''')

			-- MONTAGEM DINÂMICA DOS CAMPOS DE SELECT
			WHILE @CONTADOR > 0
			BEGIN
				
				-- GUARDA NOME DO CAMPO
				SET @NOMECAMPO = (SELECT COLUMN_NAME
									FROM INFORMATION_SCHEMA.COLUMNS TAB1
								   WHERE TAB1.TABLE_SCHEMA = '''' + @SCHEMA + ''''
									 AND TAB1.TABLE_NAME = '''' + @TABELA + ''''
									 AND ORDINAL_POSITION = CAST(@CONTADOR AS VARCHAR))					
				
				-- TABELAS QUE USAM SEQUENCE
				IF ((SELECT 1
					   FROM SYS.SEQUENCES
					  WHERE SCHEMA_NAME(SCHEMA_ID) = '''' + @SCHEMA + ''''
						AND SUBSTRING(NAME,4,LEN(NAME)) = '''' + @TABELA + '''') = 1

					 AND

					 (@MERGE = 0))

				BEGIN
											 
					/* INSERT */
						
					-- MONTAGEM DOS CAMPOS DE INSERT
					IF (@CAMPOINSERT = '''')
					BEGIN
						
						SET @CAMPOINSERT = ''['' + @NOMECAMPO + '']''
						
					END
					ELSE BEGIN
						
						SET @CAMPOINSERT = @CAMPOINSERT + '','' + ''['' + @NOMECAMPO + '']''
						
					END

					/* SELECT */
						
					IF (@CAMPOSELECT = '''')
					BEGIN
						
						IF (@NOMECAMPO = '''' + @CAMPOPK + '''')
						BEGIN

							SET @CAMPOSELECT = ''TAB1.[IMPORTACAOID]''
									
							SET @OPENQUERY = ''TAB1.[IMPORTACAOID]''
								
						END
						ELSE BEGIN

							SET @CAMPOSELECT = ''TAB1.['' + @NOMECAMPO + '']''

							SET @OPENQUERY = ''TAB1.['' + @NOMECAMPO + '']''

						END
					END
					ELSE BEGIN
						
						IF (@NOMECAMPO = '''' + @CAMPOPK + '''')
						BEGIN
							
							SET @CAMPOSELECT = @CAMPOSELECT + '','' + ''TAB1.[IMPORTACAOID]''
									
							SET @OPENQUERY = @OPENQUERY + '','' + ''TAB1.[IMPORTACAOID]''
							
						END
						ELSE IF (@NOMECAMPO = ''IMPORTACAOID'')
						BEGIN
								
							SET @CAMPOSELECT = @CAMPOSELECT + '','' + ''TAB1.['' + @CAMPOPK + '']''
									
							SET @OPENQUERY = @OPENQUERY + '','' + ''TAB1.['' + @CAMPOPK + '']''				
							
						END
						ELSE IF (@NOMECAMPO = ''IMPORTACAOTIPO'')
						BEGIN
							
							SET @CAMPOSELECT = @CAMPOSELECT + '','' + '''''''' + @IMPORTACAOTIPO + ''''''''							
								
						END
						ELSE IF (@NOMECAMPO != '''' + @CAMPOPK + '''' AND @NOMECAMPO != ''IMPORTACAOID'' AND @NOMECAMPO != ''IMPORTACAOTIPO'')
						BEGIN
							
							SET @CAMPOSELECT = @CAMPOSELECT + '','' + ''TAB1.['' + @NOMECAMPO + '']''
								
							SET @OPENQUERY = @OPENQUERY + '','' + ''TAB1.['' + @NOMECAMPO + '']''
							
						END				
					END	
				END
					
				/* TABELAS SEM SEQUENCE E NEM GUID */				
				ELSE IF NOT EXISTS (SELECT * 
				                      FROM INFORMATION_SCHEMA.COLUMNS 
									 WHERE TABLE_SCHEMA = '''' + @SCHEMA + '''' 
									   AND TABLE_NAME = '''' + @TABELA + '''' 
									   AND COLUMN_NAME = '''' + @CAMPOPK + ''''
									   AND DOMAIN_NAME = ''GUID'')
				BEGIN
											 
					/* INSERT */
						
					IF (@CAMPOINSERT = '''')
					BEGIN
						
						IF (@NOMECAMPO != '''' + @CAMPOPK + '''')
						BEGIN			
							
							SET @CAMPOINSERT = ''['' + @NOMECAMPO + '']''
							
						END					
					END
					ELSE BEGIN
						
						IF (@NOMECAMPO != '''' + @CAMPOPK + '''')
						BEGIN			
							
							SET @CAMPOINSERT = @CAMPOINSERT + '','' + ''['' + @NOMECAMPO + '']''
							
						END					
					END

					/* SELECT */
						
					IF (@CAMPOSELECT = '''')
					BEGIN
						
						IF (@NOMECAMPO != '''' + @CAMPOPK + '''')
						BEGIN
							
							SET @CAMPOSELECT = ''TAB1.['' + @NOMECAMPO + '']''
								
							SET @OPENQUERY = ''TAB1.['' + @NOMECAMPO + '']''
							
						END	
					END
					ELSE BEGIN
						
						IF (@NOMECAMPO = ''IMPORTACAOID'')
						BEGIN
							
							SET @CAMPOSELECT = @CAMPOSELECT + '','' + ''TAB1.['' + @CAMPOPK + '']''
								
							SET @OPENQUERY = @OPENQUERY + '','' + ''TAB1.['' + @CAMPOPK + '']''
							
						END
						ELSE IF (@NOMECAMPO = ''IMPORTACAOTIPO'')
						BEGIN
							
							SET @CAMPOSELECT = @CAMPOSELECT + '','' + '''''''' + @IMPORTACAOTIPO + ''''''''						
								
						END
						ELSE IF (@NOMECAMPO != '''' + @CAMPOPK + '''' AND @NOMECAMPO != ''IMPORTACAOID'' AND @NOMECAMPO != ''IMPORTACAOTIPO'')
						BEGIN
							
							SET @CAMPOSELECT = @CAMPOSELECT + '','' + ''TAB1.['' + @NOMECAMPO + '']''
								
							SET @OPENQUERY = @OPENQUERY + '','' + ''TAB1.['' + @NOMECAMPO + '']''
							
						END				
					END								
					
				END
				
				/* TABELAS GUID */				
				ELSE BEGIN
											 
					IF (@CAMPOSELECT = '''' AND @CAMPOINSERT = '''')
					BEGIN	

						SET @CAMPOINSERT = ''['' + @NOMECAMPO + '']''
						
						SET @CAMPOSELECT = ''TAB1.['' + @NOMECAMPO + '']''
						
					END
					ELSE BEGIN
					
						IF (@NOMECAMPO = ''IMPORTACAOTIPO'')
						BEGIN
						
							SET @CAMPOINSERT = @CAMPOINSERT + '','' + ''['' + @NOMECAMPO + '']''
							
							SET @CAMPOSELECT = @CAMPOSELECT + '','' + '''''''' + @IMPORTACAOTIPO + ''''''''						
								
						END
						ELSE BEGIN
						
							SET @CAMPOINSERT = @CAMPOINSERT + '','' + ''['' + @NOMECAMPO + '']''
							
							SET @CAMPOSELECT = @CAMPOSELECT + '','' + ''TAB1.['' + @NOMECAMPO + '']''
							
						END
						
					END								
					
				END
					
				--DECREMENTA O CONTADOR
				SET @CONTADOR = @CONTADOR - 1
			END
				
		END
			
		-- INSERT DAS TABELAS COM CHAVE PRIMÁRIA COMPOSTA E SEM PK
		ELSE BEGIN
			
			-- GUARDA A QUANTIDADE DE CAMPOS DA TABELA INFORMADA NO PARAMETRO
			SET @CONTADOR = (SELECT MAX(ORDINAL_POSITION)
							   FROM INFORMATION_SCHEMA.COLUMNS TAB1
							  WHERE TAB1.TABLE_SCHEMA = '''' + @SCHEMA + ''''
								AND TAB1.TABLE_NAME = '''' + @TABELA + '''')

			-- MONTAGEM DINÂMICA DOS CAMPOS DE SELECT/INSERT
			WHILE @CONTADOR > 0
			BEGIN	
				
				-- GUARDA NOME DO CAMPO
				SET @NOMECAMPO = (SELECT COLUMN_NAME
									FROM INFORMATION_SCHEMA.COLUMNS TAB1
								   WHERE TAB1.TABLE_SCHEMA = '''' + @SCHEMA + ''''
									 AND TAB1.TABLE_NAME = '''' + @TABELA+ ''''
									 AND ORDINAL_POSITION = CAST(@CONTADOR AS VARCHAR))

				IF (@CAMPOSELECT = '''' AND @CAMPOINSERT = '''')
				BEGIN	

					SET @CAMPOINSERT = ''['' + @NOMECAMPO + '']''
					
					SET @CAMPOSELECT = ''TAB1.['' + @NOMECAMPO + '']''
					
				END
				ELSE BEGIN
					
					SET @CAMPOINSERT = @CAMPOINSERT + '','' + ''['' + @NOMECAMPO + '']''
					
					SET @CAMPOSELECT = @CAMPOSELECT + '','' + ''TAB1.['' + @NOMECAMPO + '']''
					
				END			
					
				--DECREMENTA O CONTADOR
				SET @CONTADOR = @CONTADOR - 1
					
			END			
			
		END
			
	END	
	ELSE BEGIN				

	-- SOMENTE EXTRAIR DE UMA BASE PARA A OUTRA SEM TRATAMENTO

		-- GUARDA A QUANTIDADE DE CAMPOS DA TABELA INFORMADA NO PARAMETRO
		SET @CONTADOR = (SELECT MAX(ORDINAL_POSITION)
						   FROM INFORMATION_SCHEMA.COLUMNS TAB1
						  WHERE TAB1.TABLE_SCHEMA = '''' + @SCHEMA + ''''
							AND TAB1.TABLE_NAME = '''' + @TABELA + '''')

		-- MONTAGEM DINÂMICA DOS CAMPOS DE SELECT/INSERT
		WHILE @CONTADOR > 0
		BEGIN	
		
			-- GUARDA NOME DO CAMPO
			SET @NOMECAMPO = (SELECT COLUMN_NAME
								FROM INFORMATION_SCHEMA.COLUMNS TAB1
							   WHERE TAB1.TABLE_SCHEMA = '''' + @SCHEMA + ''''
								 AND TAB1.TABLE_NAME = '''' + @TABELA+ ''''
								 AND ORDINAL_POSITION = CAST(@CONTADOR AS VARCHAR))

			IF (@CAMPOSELECT = '''' AND @CAMPOINSERT = '''')
			BEGIN	

				SET @CAMPOINSERT = ''['' + @NOMECAMPO + '']''
			
				SET @CAMPOSELECT = ''TAB1.['' + @NOMECAMPO + '']''
			
			END
			ELSE BEGIN
			
				SET @CAMPOINSERT = @CAMPOINSERT + '','' + ''['' + @NOMECAMPO + '']''
			
				SET @CAMPOSELECT = @CAMPOSELECT + '','' + ''TAB1.['' + @NOMECAMPO + '']''
			
			END			
			
			--DECREMENTA O CONTADOR
			SET @CONTADOR = @CONTADOR - 1
			
		END
		
	END		

	-- FAZ MERGE DOS REGISTROS EXISTENTES NA TABELA
	IF (@MERGE = 1)
	BEGIN
	
		-- ATUALIZA O CAMPO IMPORTACAOTIPO DA BASE DE DESTINO PARA COMPARAÇÃO
		SET @QUERY = N''UPDATE ['' + @BASEDESTINO + ''].'' + @SCHEMA + ''.'' + @TABELA + ''
						   SET IMPORTACAOTIPO = '''''' + @IMPORTACAOTIPO + ''''''''

		EXECUTE (@QUERY)
		
		/* INSERE APENAS OS REGISTROS QUE NÃO EXISTEM NO DESTINO */
		SET @QUERY = N''MERGE '' + @SCHEMA + ''.'' + @TABELA + '' AS DESTINO
						USING (SELECT * FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].'' + @SCHEMA + ''.'' + @TABELA + ''''								  
		
		-- VERIFICA SE EXISTE CONDIÇÃO DE MERGE
		IF @CONDICAO IS NOT NULL SET @QUERY = @QUERY + @CONDICAO + '' ''

		-- VERIFICA SE A TABELA TEM UMA ÚNICA PK
		IF(SELECT COUNT(CONSTRAINT_NAME)
			 FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
			WHERE CONSTRAINT_NAME LIKE ''PK_%''
			  AND TABLE_SCHEMA = '''' + @SCHEMA + ''''
			  AND TABLE_NAME = '''' + @TABELA + '''') = 1
		BEGIN

			-- GUARDA O NOME DO CAMPO PK
			SET @CAMPOPK = (SELECT COLUMN_NAME
							  FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
							 WHERE CONSTRAINT_NAME LIKE ''PK_%''
							   AND TABLE_SCHEMA = '''' + @SCHEMA + ''''
							   AND TABLE_NAME = '''' + @TABELA + '''')
			
			IF @CONDICAO IS NULL 
			BEGIN
			
				SET @QUERY = @QUERY + '' WHERE '' + @CAMPOPK + '' IS NOT NULL) AS TAB1 ON (DESTINO.'' + @CAMPOPK + '' = TAB1.'' + @CAMPOPK + '')''
				
			END
			ELSE BEGIN
			
				SET @QUERY = @QUERY + '' AND '' + @CAMPOPK + '' IS NOT NULL) AS TAB1 ON (DESTINO.'' + @CAMPOPK + '' = TAB1.'' + @CAMPOPK + '')''
				
			END

		END
		ELSE BEGIN

			/* PRIMEIRO CAMPO DA PK COMPOSTA */
			SET @CAMPOPK = (SELECT COLUMN_NAME
							  FROM INFORMATION_SCHEMA.COLUMNS TAB1
							 WHERE TAB1.TABLE_SCHEMA = '''' + @SCHEMA + ''''
							   AND TAB1.TABLE_NAME = '''' + @TABELA+ ''''
							   AND ORDINAL_POSITION = 1)

			SET @QUERY = @QUERY + '' WHERE '' + @CAMPOPK + '' IS NOT NULL''

			/* SEGUNDO CAMPO DA PK COMPOSTA */
			SET @CAMPOPK2 = (SELECT COLUMN_NAME
							   FROM INFORMATION_SCHEMA.COLUMNS TAB1
							  WHERE TAB1.TABLE_SCHEMA = '''' + @SCHEMA + ''''
								AND TAB1.TABLE_NAME = '''' + @TABELA+ ''''
								AND ORDINAL_POSITION = 2)
								
			SET @QUERY = @QUERY + '' AND '' + @CAMPOPK2 + '' IS NOT NULL) AS TAB1 ON (DESTINO.'' + @CAMPOPK + '' = TAB1.'' + @CAMPOPK + ''''
								+ '' AND DESTINO.'' + @CAMPOPK2 + '' = TAB1.'' + @CAMPOPK2 + '')''

		END			

		SET @QUERY = @QUERY + '' WHEN MATCHED THEN UPDATE SET IMPORTACAOID = TAB1.'' + @CAMPOPK + ''''
		
		-- VERIFICA SE A TABELA TEM UMA ÚNICA PK
		IF(SELECT COUNT(CONSTRAINT_NAME)
			 FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
			WHERE CONSTRAINT_NAME LIKE ''PK_%''
			  AND TABLE_SCHEMA = '''' + @SCHEMA + ''''
			  AND TABLE_NAME = '''' + @TABELA + '''') = 1
		BEGIN
		
			-- ACRESCENTA O CAMPOPK NA INSERÇÃO
			SET @QUERY = @QUERY + '' WHEN NOT MATCHED BY TARGET THEN INSERT ('' + @CAMPOPK + '','' + @CAMPOINSERT + '') VALUES (TAB1.'' + @CAMPOPK + '','' + @CAMPOSELECT + '');''	
			
		END
		ELSE BEGIN
		
			SET @QUERY = @QUERY + '' WHEN NOT MATCHED BY TARGET THEN INSERT ('' + @CAMPOINSERT + '') VALUES ('' + @CAMPOSELECT + '');''
		
		END

		-- VERIFICA SE A TABELA USA IDENTITY
		IF EXISTS (SELECT *
						FROM SYS.COLUMNS TAB1 
						JOIN SYS.TABLES TAB2
						ON TAB1.OBJECT_ID = TAB2.OBJECT_ID
					WHERE TAB1.IS_IDENTITY = 1
						AND TAB2.NAME = '''' + @TABELA + '''' 
						AND SCHEMA_NAME(TAB2.SCHEMA_ID) = '''' + @SCHEMA + '''')
		BEGIN
				
			/* PARAMETRO IDENTITY A SER CONCATENADO NO INSERT */
							
			SET @IDENTITY = N''SET IDENTITY_INSERT ['' + @BASEDESTINO + ''].['' + @SCHEMA + ''].['' + @TABELA + '']''
				
		END
				
		-- CASO SEJA ALGUMA TABELA QUE USE IDENTITY, O PARAMETRO É CONCATENADO AO INSERT
		IF (@IDENTITY IS NOT NULL)
		BEGIN
				
			SET @QUERY = @IDENTITY + '' ON '' + @QUERY + '' '' +  @IDENTITY + '' OFF''
				
		END	
		
	END

	-- SE NÃO FOR MERGE, MONTA A INSERÇÃO DA TABELA, SE FOR, SOMENTE EXECUTARÁ O QUE JÁ FOI MONTADO
	IF (@MERGE = 0)
	BEGIN

		-- MONTA O INSERT
		SET @QUERY = N''INSERT INTO ['' + @BASEDESTINO + ''].['' + @SCHEMA + ''].'' + @TABELA + ''
									('' + @CAMPOINSERT + '')
							 SELECT  '' + @CAMPOSELECT + ''
							   FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].['' + @SCHEMA + ''].['' + @TABELA + ''] TAB1''
					
		-- CASO HAJA CONDIÇÃO NO INSERT ELA É CONCATENADA NO INSERT
		IF (@CONDICAO IS NOT NULL)
		BEGIN
					
			SET @QUERY = @QUERY + '''' + @CONDICAO + '''' + '' ''
						
		END
		
	END
		
	-- SE FOR UMA EXTRAÇÃO
	IF(@TIPOIMPORTACAO = 1)
	BEGIN

		-- VERIFICA SE A TABELA USA IDENTITY
		IF EXISTS (SELECT *
						FROM SYS.COLUMNS TAB1 
						JOIN SYS.TABLES TAB2
						ON TAB1.OBJECT_ID = TAB2.OBJECT_ID
					WHERE TAB1.IS_IDENTITY = 1
						AND TAB2.NAME = '''' + @TABELA + '''' 
						AND SCHEMA_NAME(TAB2.SCHEMA_ID) = '''' + @SCHEMA + '''')
		BEGIN
				
			/* PARAMETRO IDENTITY A SER CONCATENADO NO INSERT */
							
			SET @IDENTITY = N''SET IDENTITY_INSERT ['' + @BASEDESTINO + ''].['' + @SCHEMA + ''].['' + @TABELA + '']''
				
		END
				
		-- CASO SEJA ALGUMA TABELA QUE USE IDENTITY, O PARAMETRO É CONCATENADO AO INSERT
		IF (@IDENTITY IS NOT NULL)
		BEGIN
				
			SET @QUERY = @IDENTITY + '' ON '' + @QUERY + '' '' +  @IDENTITY + '' OFF''
				
		END	
	END	

	EXECUTE SP_EXECUTESQL @QUERY

	END TRY 
	 BEGIN CATCH     
	  SELECT  ERROR_NUMBER() AS ERRORNUMBER,
		ERROR_SEVERITY() AS ERRORSEVERITY,
		ERROR_STATE() AS ERRORSTATE,
		ERROR_PROCEDURE() AS ERRORPROCEDURE,
		ERROR_LINE() AS ERRORLINE,
		ERROR_MESSAGE() AS ERRORMESSAGE;     

	  IF @@TRANCOUNT > 0         
	   ROLLBACK TRANSACTION; 

	 END CATCH;

	 IF @@TRANCOUNT > 0
	  COMMIT TRANSACTION;
	END'	
	
	/* PROCEDIMENTO QUE VINCULA AS PROFISSOES IGUAIS NAS DUAS BASES E INSERE O QUE FOR DIFERENTE */

	EXECUTE SP_EXECUTESQL N'
	/* 	TIPOTRATAMENTO:
	1 - VINCULA AS PROFISSÕES IGUAIS NAS DUAS BASES
	2 - APAGA TODAS AS PROFISSOES NO DESTINO, E INSERE TODAS AS QUE EXISTEM NA ORIGEM */	

	CREATE PROCEDURE [PAROQUIA].[STP_TRATAPROFISSAO]

	@SERVIDORDESTINO NVARCHAR(MAX),
	@BASEDESTINO NVARCHAR(MAX),
	@SERVIDORORIGEM NVARCHAR(MAX),
	@BASEORIGEM NVARCHAR(MAX),
	@INSTANCIADIFERENTE CHAR(1),                 /* INFORME SE AS BASES ESTÃO EM INSTANCIAS DIFERENTES, |S| PARA SIM, |N| PARA NÃO */
	@TIPOTRATAMENTO INTEGER                      /* |0| PARA EXCLUIR AS PROFISSOES DO DESTINO E INSERIR COMO ESTÁ NA ORIGEM, |1| PARA VINCULAR AS PROFISSÕES IGUAIS E INSERIR AS DIFERENTES */

	AS
	BEGIN
	 BEGIN TRANSACTION;
	BEGIN TRY

	SET XACT_ABORT ON
	SET NOCOUNT ON
	SET ANSI_NULLS ON
	SET QUOTED_IDENTIFIER ON

	DECLARE @PROFISSAO_NEW NVARCHAR(MAX);
	DECLARE @PROFISSAO_OLD NVARCHAR(MAX);
	DECLARE @DECLARACURSOR NVARCHAR(MAX);
	DECLARE @SELECT NVARCHAR(MAX);
	DECLARE @PARAMETROS NVARCHAR(MAX);
	DECLARE @QUERY NVARCHAR(MAX);
	DECLARE @TABELAFILHO NVARCHAR(MAX);
	DECLARE @SCHEMAFILHO NVARCHAR(MAX);
	DECLARE @CAMPOFK NVARCHAR(MAX);

	IF (@TIPOTRATAMENTO = 1)
	BEGIN

		-- CURSOR QUE GRAVA AS PROFISSOES DA BASE DE DESTINO
		SET @SELECT = N''SELECT DISTINCT TAB1.PROFISSAO 
						   FROM ['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].PAROQUIA.PROFISSAO TAB1
						  ORDER BY TAB1.PROFISSAO''

		SET @DECLARACURSOR = N''DECLARE CR_PROFISSAO_NEW CURSOR SCROLL FOR '' + @SELECT + '';
								   OPEN CR_PROFISSAO_NEW; 
								  FETCH NEXT FROM CR_PROFISSAO_NEW 
								   INTO @RESULT''

		SET @PARAMETROS = N''@RESULT NVARCHAR(MAX) OUTPUT''

		EXECUTE SP_EXECUTESQL @DECLARACURSOR
							 ,@PARAMETROS
							 ,@PROFISSAO_NEW OUTPUT
						  
		SET @PROFISSAO_NEW = REPLACE(@PROFISSAO_NEW,''(a)'','''')

		WHILE @@FETCH_STATUS = 0
		BEGIN	
		
			-- CURSOR QUE GRAVA AS PROFISSOES DA BASE DE ORIGEM
			SET @SELECT = N''SELECT DISTINCT TAB1.PROFISSAO
							   FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].PAROQUIA.PROFISSAO TAB1
							  ORDER BY TAB1.PROFISSAO''

			SET @DECLARACURSOR = N''DECLARE CR_PROFISSAO_OLD CURSOR SCROLL FOR '' + @SELECT + '';
									   OPEN CR_PROFISSAO_OLD; 
									  FETCH NEXT FROM CR_PROFISSAO_OLD 
									   INTO @RESULT''

			SET @PARAMETROS = N''@RESULT NVARCHAR(MAX) OUTPUT''

			EXECUTE SP_EXECUTESQL @DECLARACURSOR
								 ,@PARAMETROS
								 ,@PROFISSAO_OLD OUTPUT
								 
			SET @PROFISSAO_OLD = REPLACE(@PROFISSAO_OLD,''(a)'','''')

			WHILE @@FETCH_STATUS = 0
			BEGIN	

				-- GRAVA OS NOVOS IDS EM IMPORTACAOID
				IF (@PROFISSAO_OLD = @PROFISSAO_NEW) 
				BEGIN

					SET @QUERY = N''UPDATE ['' + @BASEORIGEM + ''].PAROQUIA.PROFISSAO
									   SET IMPORTACAOID = (SELECT TOP 1 TAB2.IDPROFISSAO
															  FROM ['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].PAROQUIA.PROFISSAO TAB2
															 WHERE TAB2.PROFISSAO = '''''''''' + @PROFISSAO_NEW + '''''''''')
									  WHERE PROFISSAO = '''''''''' + @PROFISSAO_OLD + ''''''''''''
								 
					IF (@INSTANCIADIFERENTE = ''N'')
					BEGIN
					
						SET @PARAMETROS =  N''['' + @BASEORIGEM + ''].SYS.SP_EXECUTESQL N'''''' + @QUERY + ''''''''
					
					END
					ELSE BEGIN
					
						SET @PARAMETROS =  N''['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].SYS.SP_EXECUTESQL N'''''' + @QUERY + ''''''''
					
					END

					EXECUTE (@PARAMETROS)

					/* SE FOREM IGUAIS, INCREMENTA OS DOIS CURSORES */
					-- INCREMENTA O CURSOR CR_PROFISSAO_OLD
					FETCH NEXT FROM CR_PROFISSAO_OLD
					 INTO @PROFISSAO_OLD;
					 
					 SET @PROFISSAO_OLD = REPLACE(@PROFISSAO_OLD,''(a)'','''')
				
					-- INCREMENTA O CURSOR CR_PROFISSAO_NEW
					FETCH NEXT FROM CR_PROFISSAO_NEW
					 INTO @PROFISSAO_NEW;
					 
					 SET @PROFISSAO_NEW = REPLACE(@PROFISSAO_NEW,''(a)'','''')
				
				END
				ELSE BEGIN
				
					-- INCREMENTA O CURSOR CR_PROFISSAO_OLD
					FETCH NEXT FROM CR_PROFISSAO_OLD
					 INTO @PROFISSAO_OLD;
					 
					 SET @PROFISSAO_OLD = REPLACE(@PROFISSAO_OLD,''(a)'','''')
					 
				END

			END				
		
			-- FECHA E DESALOCA O CURSOR CR_PROFISSAO_OLD
			CLOSE CR_PROFISSAO_OLD
			DEALLOCATE CR_PROFISSAO_OLD
		
			-- INCREMENTA O CURSOR CR_PROFISSAO_NEW
			FETCH NEXT FROM CR_PROFISSAO_NEW
			 INTO @PROFISSAO_NEW;
			 
			 SET @PROFISSAO_NEW = REPLACE(@PROFISSAO_NEW,''(a)'','''')

		END	

		-- FECHA E DESALOCA O CURSOR CR_PROFISSAO_NEW
		CLOSE CR_PROFISSAO_NEW
		DEALLOCATE CR_PROFISSAO_NEW					
				
		-- INSERT DAS PROFISSOES QUE NAO EXISTEM NA BASE DE DESTINO
		SET @QUERY = N''INSERT INTO ['' + @BASEDESTINO + ''].PAROQUIA.PROFISSAO
					   ([IDPROFISSAO]
					   ,[PROFISSAO]
					   ,[IMPORTACAOID])
				 SELECT (NEXT VALUE FOR PAROQUIA.SEQPROFISSAO)
					   ,[PROFISSAO]
					   ,[IDPROFISSAO]
				   FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].PAROQUIA.PROFISSAO
				  WHERE IMPORTACAOID IS NULL''
				  
		IF (@INSTANCIADIFERENTE = ''N'')
		BEGIN
			
			SET @PARAMETROS =  N''['' + @BASEDESTINO + ''].SYS.SP_EXECUTESQL N'''''' + @QUERY + ''''''''
			
		END
		ELSE BEGIN
			
			SET @PARAMETROS =  N''['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].SYS.SP_EXECUTESQL N'''''' + @QUERY + ''''''''
			
		END

		EXECUTE (@PARAMETROS)	
		
		-- UPDATE DAS REFERÊNCIAS DAS PROFISSÕES INSERIDAS NA BASE DE DESTINO
		SET @QUERY = N''UPDATE TAB1
						   SET IMPORTACAOID = TAB2.IDPROFISSAO
						  FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].PAROQUIA.PROFISSAO TAB1	
						  JOIN ['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].PAROQUIA.PROFISSAO TAB2 ON TAB2.IMPORTACAOID = TAB1.IDPROFISSAO''
		
		EXECUTE SP_EXECUTESQL @QUERY
		
		-- GRAVA NO CURSOR TODAS AS TABELAS QUE FAZEM REFERÊNCIA NA TABELA PROFISSÃO
		SET @SELECT = N''SELECT UPPER(TAB2.TABLE_NAME) AS TABELAFILHO
							   ,UPPER(TAB2.TABLE_SCHEMA) AS SCHEMAFILHO
							   ,UPPER(TAB2.COLUMN_NAME) AS CAMPOFK
						   FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].SYS.FOREIGN_KEYS TAB1
						   JOIN ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB2 ON TAB2.CONSTRAINT_NAME = TAB1.NAME
						  WHERE REFERENCED_OBJECT_ID = OBJECT_ID(''''PAROQUIA.PROFISSAO'''')			
						  GROUP BY TAB2.TABLE_NAME
							   ,TAB2.TABLE_SCHEMA
							   ,TAB2.COLUMN_NAME''
							   
		SET @DECLARACURSOR = N''DECLARE CR_PERCORRETABELASFILHO CURSOR SCROLL FOR '' + @SELECT + '';
								   OPEN CR_PERCORRETABELASFILHO; 
								  FETCH NEXT FROM CR_PERCORRETABELASFILHO 
								   INTO @RESULT_TABELAFILHO, @RESULT_SCHEMAFILHO, @RESULT_CAMPOFK''
								  
		SET @PARAMETROS = N''@RESULT_TABELAFILHO NVARCHAR(100) OUTPUT
							,@RESULT_SCHEMAFILHO NVARCHAR(100) OUTPUT
							,@RESULT_CAMPOFK NVARCHAR(100) OUTPUT''

		EXEC SP_EXECUTESQL @DECLARACURSOR
						  ,@PARAMETROS
						  ,@RESULT_TABELAFILHO = @TABELAFILHO OUTPUT
						  ,@RESULT_SCHEMAFILHO = @SCHEMAFILHO OUTPUT
						  ,@RESULT_CAMPOFK = @CAMPOFK OUTPUT

		WHILE @@FETCH_STATUS = 0
		BEGIN		
					
			-- UPDATE DO CAMPOFK PARA O NOVOID NA QUE SERÁ USADO NA BASE DE DESTINO
			SET @QUERY = N''UPDATE TAB1
							   SET '' + @CAMPOFK + '' = TAB2.IMPORTACAOID
							  FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].'' + @SCHEMAFILHO + ''.'' + @TABELAFILHO + '' TAB1
							  JOIN ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].PAROQUIA.PROFISSAO TAB2 ON TAB2.IDPROFISSAO = TAB1.'' + @CAMPOFK + ''
							 WHERE TAB2.IMPORTACAOID IS NOT NULL''

			EXECUTE SP_EXECUTESQL @QUERY

			-- INCREMENTA O CURSOR CR_CAMPOSFK
			FETCH NEXT FROM CR_PERCORRETABELASFILHO 
			 INTO @TABELAFILHO, @SCHEMAFILHO, @CAMPOFK	

		END

		-- FECHA  E DESALOCA O CURSOR CR_PERCORRETABELASFILHO
		CLOSE CR_PERCORRETABELASFILHO
		DEALLOCATE CR_PERCORRETABELASFILHO

	END
	ELSE BEGIN

		--DELETA TODAS AS PROFISSOES EXISTENTES NO DESTINO
		SET @QUERY = N''DELETE
						  FROM PAROQUIA.PROFISSAO'' 

		IF (@INSTANCIADIFERENTE = ''N'')
		BEGIN
			
			SET @PARAMETROS =  N''['' + @BASEDESTINO + ''].SYS.SP_EXECUTESQL N'''''' + @QUERY + ''''''''
			
		END
		ELSE BEGIN
			
			SET @PARAMETROS =  N''['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].SYS.SP_EXECUTESQL N'''''' + @QUERY + ''''''''
			
		END

		EXECUTE (@PARAMETROS)

		-- INSERE TODAS AS PROFISSOES DA ORIGEM NO DESTINO
		SET @QUERY = N''INSERT INTO ['' + @SERVIDORDESTINO + ''].['' + @BASEDESTINO + ''].PAROQUIA.PROFISSAO
						SELECT *
						  FROM ['' + @SERVIDORORIGEM + ''].['' + @BASEORIGEM + ''].[PAROQUIA].PROFISSAO''

		EXECUTE SP_EXECUTESQL @QUERY

	END

	END TRY 
	 BEGIN CATCH     
	  SELECT  ERROR_NUMBER() AS ERRORNUMBER,
		ERROR_SEVERITY() AS ERRORSEVERITY,
		ERROR_STATE() AS ERRORSTATE,
		ERROR_PROCEDURE() AS ERRORPROCEDURE,
		ERROR_LINE() AS ERRORLINE,
		ERROR_MESSAGE() AS ERRORMESSAGE;     

	  IF @@TRANCOUNT > 0         
	   ROLLBACK TRANSACTION

	 END CATCH;

	 IF @@TRANCOUNT > 0     
	  COMMIT TRANSACTION
	END'	
	
	/* ATIVAÇÃO DAS TRIGGERS E CONSTRAINTS */
	EXECUTE @PARAMETROS N'
	CREATE PROCEDURE PAROQUIA.STP_ATIVATRIGGERSEFKS
	AS
	BEGIN

	DECLARE @FK NVARCHAR(MAX)
	DECLARE @CHECK NVARCHAR(MAX)
	DECLARE @TABELA NVARCHAR(MAX)
	DECLARE @SCHEMA NVARCHAR(MAX)
	DECLARE @CONSTFK NVARCHAR(MAX)
	DECLARE @CHECKFK NVARCHAR(MAX)
	DECLARE @PRINT NVARCHAR(MAX)
	DECLARE @CONTADOR INTEGER

	SET XACT_ABORT ON
	SET NOCOUNT ON
	SET ANSI_NULLS ON
	SET QUOTED_IDENTIFIER ON

	/* VERIFICA SE HÁ TRIGGERS DESABILITADAS DA BASE */

	IF EXISTS (SELECT 1 FROM SYS.TRIGGERS WHERE IS_DISABLED = 1)
	BEGIN
		
		PRINT ''HABILITANDO TODAS AS TRIGGERS...''
		PRINT ''''
		
		EXECUTE SP_EXECUTESQL N''SP_MSFOREACHTABLE "ALTER TABLE ? ENABLE TRIGGER ALL"''
		
		PRINT ''TRIGGERS HABILITADAS!''
		PRINT ''''

	END
	ELSE BEGIN

		PRINT ''TRIGGERS HABILITADAS!''
		PRINT ''''
		
	END

	/* SELECIONA TODAS AS CONSTRAINTS DESABILITADAS DA BASE */

	-- DECLARAÇÃO DO CURSOR QUE IRÁ PERCORRER AS CONSTRAINTS DESATIVADAS DENTRO DA BASE
	DECLARE CR_FKDISABLE CURSOR SCROLL FOR
	SELECT UPPER(OBJ.NAME) AS NOME_FK 
		  ,UPPER(SCH.NAME) AS ESQUEMA   
		  ,UPPER(TAB1.NAME) AS TABELA
	  FROM SYS.FOREIGN_KEY_COLUMNS FKC 
	  JOIN SYS.OBJECTS OBJ ON (OBJ.OBJECT_ID  = FKC.CONSTRAINT_OBJECT_ID) 
	  JOIN SYS.TABLES TAB1 ON (TAB1.OBJECT_ID = FKC.PARENT_OBJECT_ID) 
	  JOIN SYS.SCHEMAS SCH ON (TAB1.SCHEMA_ID = SCH.SCHEMA_ID) 
	  JOIN SYS.COLUMNS COL1 ON (COL1.COLUMN_ID = PARENT_COLUMN_ID AND COL1.OBJECT_ID = TAB1.OBJECT_ID) 
	  JOIN SYS.TABLES TAB2 ON (TAB2.OBJECT_ID = FKC.REFERENCED_OBJECT_ID) 
	  JOIN SYS.COLUMNS COL2 ON (COL2.COLUMN_ID = REFERENCED_COLUMN_ID AND COL2.OBJECT_ID =  TAB2.OBJECT_ID) 
	  JOIN SYS.SYSFOREIGNKEYS SIT ON (SIT.CONSTID = FKC.CONSTRAINT_OBJECT_ID) 
	 WHERE OBJECTPROPERTY(CONSTID,(''CNSTISDISABLED'')) <> 0

	-- INICIA O CURSOR 
	 OPEN CR_FKDISABLE; 
	FETCH NEXT FROM CR_FKDISABLE 
	 INTO @FK, @SCHEMA, @TABELA

	WHILE @@FETCH_STATUS = 0
	BEGIN	

		-- TRATAMENTO DE EXCESSÃO 
		BEGIN TRY

			SET @CONSTFK = N''ALTER TABLE '' + @SCHEMA + ''.'' + @TABELA + '' WITH CHECK CHECK CONSTRAINT '' + @FK +''''

			EXECUTE SP_EXECUTESQL @CONSTFK 
			
			-- INCREMENTA O CURSOR
			FETCH NEXT FROM CR_FKDISABLE
			INTO @FK, @SCHEMA, @TABELA  
		
		END TRY
		BEGIN CATCH 

			-- INCREMENTA O CURSOR
			FETCH NEXT FROM CR_FKDISABLE
			INTO @FK, @SCHEMA, @TABELA

		END CATCH
	END

	-- FECHA E DESALOCA O CURSOR
	CLOSE CR_FKDISABLE
	DEALLOCATE CR_FKDISABLE

	/* SELECIONA TODAS AS CHECKS DESABILITADAS DA BASE */

	-- DECLARAÇÃO DO CURSOR QUE IRÁ PERCORRER AS FKS DESATIVADAS DENTRO DA BASE
	DECLARE CR_CHECKDISABLE CURSOR SCROLL FOR
	 SELECT UPPER(TAB1.NAME) AS NOME_FK
		   ,UPPER(TAB2.NAME) AS ESQUEMA
		   ,UPPER(OBJECT_NAME(PARENT_OBJECT_ID)) AS TABELA
	   FROM SYS.CHECK_CONSTRAINTS TAB1
	   JOIN SYS.SCHEMAS TAB2 ON TAB2.SCHEMA_ID = TAB1.SCHEMA_ID
	  WHERE IS_DISABLED = 1

	  
	-- INICIA O CURSOR 
	 OPEN CR_CHECKDISABLE; 
	FETCH NEXT FROM CR_CHECKDISABLE 
	 INTO @CHECK, @SCHEMA, @TABELA

	WHILE @@FETCH_STATUS = 0
	BEGIN	

		-- TRATAMENTO DE EXCESSÃO 
		BEGIN TRY  

			SET @CHECKFK = N''ALTER TABLE '' + @SCHEMA + ''.'' + @TABELA + '' WITH CHECK CHECK CONSTRAINT '' + @CHECK +''''

			EXECUTE SP_EXECUTESQL @CHECKFK  

			-- INCREMENTA O CURSOR
			FETCH NEXT FROM CR_CHECKDISABLE
			INTO @CHECK, @SCHEMA, @TABELA
		
		END TRY
		BEGIN CATCH 

			-- INCREMENTA O CURSOR
			FETCH NEXT FROM CR_CHECKDISABLE
			INTO @CHECK, @SCHEMA, @TABELA

		END CATCH
	END

	CLOSE CR_CHECKDISABLE
	DEALLOCATE CR_CHECKDISABLE

	-- VERIFICA SE EXISTE CONSTRAINTS DESABILITADAS
	IF (SELECT COUNT(OBJECT_NAME(CONSTID))
		  FROM SYSFOREIGNKEYS
		 WHERE OBJECTPROPERTY(CONSTID, ''CNSTISDISABLED'') = 1) = 0

		BEGIN

			-- PRINT
			PRINT ''-> TODAS AS CONSTRAINTS FORAM ATIVADAS!''
			PRINT ''''

		END
		ELSE BEGIN

			-- SELECIONA TODAS AS CONSTRAINTS DESABILITADAS
			SELECT UPPER(OBJ.NAME) AS NOME_FK 
				  ,UPPER(SCH.NAME) AS ESQUEMA   
				  ,(CASE WHEN OBJECTPROPERTY(CONSTID,(''CNSTISDISABLED'')) = 0 THEN ''ENABLED''  ELSE ''DISABLED'' END) AS STATUS
				  ,UPPER(TAB1.NAME) AS TABELA
				  ,UPPER(COL1.NAME) AS COLUNA    
				  ,UPPER(TAB2.NAME) AS TABELA_REFERENCIADA 
				  ,UPPER(COL2.NAME) AS COLUNA_REFERENCIADA 
			  FROM SYS.FOREIGN_KEY_COLUMNS FKC 
			  JOIN SYS.OBJECTS OBJ ON (OBJ.OBJECT_ID  = FKC.CONSTRAINT_OBJECT_ID) 
			  JOIN SYS.TABLES TAB1 ON (TAB1.OBJECT_ID = FKC.PARENT_OBJECT_ID) 
			  JOIN SYS.SCHEMAS SCH ON (TAB1.SCHEMA_ID = SCH.SCHEMA_ID) 
			  JOIN SYS.COLUMNS COL1 ON (COL1.COLUMN_ID = PARENT_COLUMN_ID AND COL1.OBJECT_ID = TAB1.OBJECT_ID) 
			  JOIN SYS.TABLES TAB2 ON (TAB2.OBJECT_ID = FKC.REFERENCED_OBJECT_ID) 
			  JOIN SYS.COLUMNS COL2 ON (COL2.COLUMN_ID = REFERENCED_COLUMN_ID AND COL2.OBJECT_ID =  TAB2.OBJECT_ID) 
			  JOIN SYS.SYSFOREIGNKEYS SIT ON (SIT.CONSTID = FKC.CONSTRAINT_OBJECT_ID) 
			 WHERE OBJECTPROPERTY(CONSTID,(''CNSTISDISABLED'')) <> 0

		END

		-- VERIFICA SE EXISTE CHECKS CONSTRAINTS DESABILITADAS
		IF (SELECT COUNT(*)
			  FROM SYS.CHECK_CONSTRAINTS
			 WHERE IS_DISABLED = 1) = 0

		BEGIN
		
			-- PRINT
			PRINT ''-> TODAS AS CHECKS CONSTRAINTS FORAM ATIVADAS!''
			PRINT ''''
			PRINT ''PROCEDIMENTO FINALIZADO. A BASE ESTÁ PRONTA PARA LIBERAÇÃO PARA O CLIENTE!''
			PRINT ''''
		
		END
		ELSE BEGIN
		
			SELECT UPPER(TAB1.NAME) AS NOME_CHECK
				  ,UPPER(TAB2.NAME) AS ESQUEMA
				  ,(CASE WHEN TAB1.IS_DISABLED = 1 THEN ''ENABLE'' ELSE ''DISABLE'' END) AS STATUS
				  ,UPPER(OBJECT_NAME(PARENT_OBJECT_ID)) AS TABELA
			  FROM SYS.CHECK_CONSTRAINTS TAB1
			  JOIN SYS.SCHEMAS TAB2 ON TAB2.SCHEMA_ID = TAB1.SCHEMA_ID
			 WHERE TAB1.IS_DISABLED = 1

		END	
	END'
	
	/* -------------------------------------------------------------------------------------------------------------------------------------------- */
	/* EXECUÇÃO DOS PROCEDIMENTOS */
	/* -------------------------------------------------------------------------------------------------------------------------------------------- */
	
	/* CRIAÇÃO DAS FOREIGN NAS TABELAS COM O CAMPO DE REFERÊNCIA SEM FK DEFINIDA */

	PRINT 'CRIANDO FOREIGN KEYS NAS TABELAS QUE POSSUI O CAMPO DE REFERÊNCIA SEM FK DEFINIDA'
	PRINT ''		

	/* LEITURA DE TODAS AS TABELAS QUE TEM O CAMPO MAS NÃO TEM FK */
	DECLARE CR_FKS CURSOR SCROLL FOR
	/* DIOCESES */
	SELECT UPPER(TAB1.TABLE_SCHEMA) AS ESQUEMA
		  ,UPPER(TAB1.TABLE_NAME) AS TABELA
		  ,UPPER(TAB1.COLUMN_NAME) AS COLUNA
		  ,'DIOCESES' AS ORGANISMO
	  FROM INFORMATION_SCHEMA.COLUMNS TAB1
	  JOIN INFORMATION_SCHEMA.TABLES TAB2 ON TAB2.TABLE_SCHEMA = TAB1.TABLE_SCHEMA AND TAB2.TABLE_NAME = TAB1.TABLE_NAME
	  JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB3 ON TAB3.TABLE_SCHEMA = TAB1.TABLE_SCHEMA AND TAB3.TABLE_NAME = TAB1.TABLE_NAME
	 WHERE TAB1.TABLE_SCHEMA + '.' + TAB1.TABLE_NAME NOT IN (SELECT TAB2.TABLE_SCHEMA + '.' + TAB2.TABLE_NAME
															   FROM SYS.FOREIGN_KEYS TAB1
															   JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB2 ON TAB2.CONSTRAINT_NAME = TAB1.NAME
															  WHERE REFERENCED_OBJECT_ID = OBJECT_ID('DBO.DIOCESES'))

	   AND TAB1.TABLE_SCHEMA NOT LIKE '%LOG%'
	   AND TAB1.TABLE_NAME != 'DIOCESES'
	   AND TAB1.COLUMN_NAME IN ('DIOCESEID', 'IDDIOCESE')
	 GROUP BY TAB1.TABLE_SCHEMA
			 ,TAB1.TABLE_NAME
			 ,TAB1.COLUMN_NAME

	UNION ALL

	/* PAROQUIAS */
	SELECT UPPER(TAB1.TABLE_SCHEMA) AS ESQUEMA
		  ,UPPER(TAB1.TABLE_NAME) AS TABELA
		  ,UPPER(TAB1.COLUMN_NAME) AS COLUNA
		  ,'PAROQUIAS' AS ORGANISMO
	  FROM INFORMATION_SCHEMA.COLUMNS TAB1
	  JOIN INFORMATION_SCHEMA.TABLES TAB2 ON TAB2.TABLE_SCHEMA = TAB1.TABLE_SCHEMA AND TAB2.TABLE_NAME = TAB1.TABLE_NAME
	  JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB3 ON TAB3.TABLE_SCHEMA = TAB1.TABLE_SCHEMA AND TAB3.TABLE_NAME = TAB1.TABLE_NAME
	 WHERE TAB1.TABLE_SCHEMA + '.' + TAB1.TABLE_NAME NOT IN (SELECT TAB2.TABLE_SCHEMA + '.' + TAB2.TABLE_NAME
															   FROM SYS.FOREIGN_KEYS TAB1
															   JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE TAB2 ON TAB2.CONSTRAINT_NAME = TAB1.NAME
															  WHERE REFERENCED_OBJECT_ID = OBJECT_ID('DBO.PAROQUIAS'))

	   AND TAB1.TABLE_SCHEMA NOT LIKE '%LOG%'
	   AND TAB1.TABLE_NAME != 'PAROQUIAS'
	   AND TAB1.COLUMN_NAME IN ('PAROQUIAID', 'IDPAROQUIA', 'IDORGANISMO', 'ORGANISMOID', 'IDPAROQUIAPERTENCE', 'IDPAROQUIAVINCULADA')
	 GROUP BY TAB1.TABLE_SCHEMA
			 ,TAB1.TABLE_NAME
			 ,TAB1.COLUMN_NAME
	
	 OPEN CR_FKS
	FETCH NEXT FROM CR_FKS
	 INTO @SCHEMA, @TABELA, @CAMPOFK, @ORGANISMO
	 
	WHILE @@FETCH_STATUS = 0
	BEGIN
		
		-- CORREÇÃO DO TIPO DO CAMPO E PERMISSÃO DE VALOR NULO
		SET @QUERY = N'ALTER TABLE ' + @SCHEMA + '.' + @TABELA + ' ALTER COLUMN ' + @CAMPOFK + ' [COMUM].[ID] NULL'
		
		EXECUTE (@QUERY)
		
		-- SERVIDOR DE DESTINO
		SET @QUERY = @PARAMETROS + 'N' + N'''ALTER TABLE ' + @SCHEMA + '.' + @TABELA + ' ALTER COLUMN ' + @CAMPOFK + ' [COMUM].[ID] NULL'''
		
		EXECUTE (@QUERY)
	
		-- CORREÇÃO DE DADOS INVÁLIDOS
		SET @QUERY = N'UPDATE TAB1 
						  SET ' + @CAMPOFK + ' = NULL
						 FROM [' + @BASEORIGEM + '].' + @SCHEMA + '.' + @TABELA + ' TAB1
						WHERE ' + @CAMPOFK + ' NOT IN (SELECT ID
														 FROM [' + @BASEORIGEM + '].DBO.' + @ORGANISMO + ')'
														 
		EXECUTE (@QUERY)
		
		-- CRIAÇÃO DA FK
		SET @QUERY = N'ALTER TABLE [' + @BASEORIGEM + '].' + @SCHEMA + '.' + @TABELA + ' WITH NOCHECK ADD CONSTRAINT [FK_' + @TABELA + '_' + @ORGANISMO + '] FOREIGN KEY([' + @CAMPOFK + ']) 
					   REFERENCES [' + @BASEORIGEM + '].[DBO].[' + @ORGANISMO + '] ([ID])'	

		EXECUTE (@QUERY)
	
		FETCH NEXT FROM CR_FKS
		 INTO @SCHEMA, @TABELA, @CAMPOFK, @ORGANISMO
		 
	END 

	/* DESABILITA CONSTRAINTS */
	IF (@DESABILITA_TRIGGEREFKS = 'S')
	BEGIN

		-- DESABILITA TODAS AS CONSTRAINTS 
		PRINT 'DESABILITANDO CONTRAINTS...'
		PRINT ''

		-- DESABILITA TODAS AS CONSTRAINTS NA BASE DE DESTINO
		EXECUTE @PARAMETROS N'EXEC SP_MSFOREACHTABLE "ALTER TABLE ? NOCHECK CONSTRAINT ALL"'

		-- DESABILITA TODAS AS CONSTRAINTS NA BASE DE ORIGEM
		EXECUTE SP_EXECUTESQL N' EXEC SP_MSFOREACHTABLE "ALTER TABLE ? NOCHECK CONSTRAINT ALL"'
		
	END

	PRINT 'DESABILITANDO OS ÍNDICES UNIQUES NA BASE DE DESTINO...'
	PRINT ''

	/* DESABILITA OS INDECES UNIQUES */
	DECLARE CR_INDEX CURSOR SCROLL FOR
	 SELECT UPPER(TAB1.NAME)
		   ,UPPER(SCHEMA_NAME(TAB2.SCHEMA_ID))
		   ,UPPER(TAB2.NAME)
	  FROM SYS.INDEXES TAB1
	  JOIN SYS.TABLES TAB2 ON TAB2.OBJECT_ID = TAB1.OBJECT_ID
	 WHERE TAB1.NAME LIKE 'IX%' 
	   AND TAB1.IS_UNIQUE = 1

	OPEN CR_INDEX
   FETCH NEXT FROM CR_INDEX
	INTO @INDEX
	    ,@SCHEMA
		,@TABELA

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SET @QUERY = N'ALTER INDEX ' + @INDEX + ' ON ' + @SCHEMA + '.' + @TABELA + ' DISABLE;'
		
		SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''

		EXECUTE(@QUERY)

		FETCH NEXT FROM CR_INDEX
		 INTO @INDEX
	         ,@SCHEMA
		     ,@TABELA
	END	
		
	/* -------------------------------------------------------------------------------------------------------------------------------------------- */
	/* CRIAÇÃO DOS CAMPOS DE IMPORTAÇÃO */
	/* -------------------------------------------------------------------------------------------------------------------------------------------- */

	PRINT 'CRIANDO OS CAMPOS NECESSÁRIOS PARA A IMPORTAÇÃO E DESABILITA OS ÍNDICES UNIQUES...'
	PRINT ''

	/* CRIAÇÃO DOS CAMPOS IMPORTACAOID, IMPORTACAOTIPO E TRATAMENTO NAS TABELAS QUE NÃO EXISTEM */
	IF (@TIPOIMPORTACAO = 0)
	BEGIN
	
		/* CAMPOS IMPORTACAOID E IMPORTACAOTIPO */
		DECLARE CR_CAMPOSIMPORTACAO CURSOR SCROLL FOR
		SELECT UPPER(TAB1.TABLE_SCHEMA)
			  ,UPPER(TAB1.TABLE_NAME)
		  FROM INFORMATION_SCHEMA.TABLES TAB1
		  JOIN @ESQUEMA TAB2 ON TAB2.ESQUEMA = TAB1.TABLE_SCHEMA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
		 WHERE TAB1.TABLE_TYPE = 'BASE TABLE'
		   AND TAB1.TABLE_SCHEMA != 'HANGFIRE-ECLESIAL'
		   AND TAB1.TABLE_SCHEMA NOT LIKE '%LOG%'
		   AND TAB1.TABLE_NAME NOT LIKE '%DE_PARA_%'
		   AND TAB1.TABLE_SCHEMA + '.' + TABLE_NAME NOT IN (SELECT TABLE_SCHEMA + '.' + TABLE_NAME
														      FROM INFORMATION_SCHEMA.COLUMNS 
														     WHERE TABLE_NAME NOT LIKE 'VIEW%'
														       AND (COLUMN_NAME = 'IMPORTACAOID'
														        OR COLUMN_NAME = 'IMPORTACAOTIPO')
														     GROUP BY TABLE_SCHEMA + '.' + TABLE_NAME)
		 ORDER BY TAB1.TABLE_SCHEMA
			     ,TAB1.TABLE_NAME
				   
		OPEN CR_CAMPOSIMPORTACAO
	   FETCH NEXT FROM CR_CAMPOSIMPORTACAO
	    INTO @SCHEMA, @TABELA
		
		WHILE @@FETCH_STATUS = 0
		BEGIN		
		
			-- SERVIDOR DE ORIGEM
			SET @QUERY = N'ALTER TABLE [' + @BASEORIGEM + '].[' + @SCHEMA + '].' + @TABELA + ' ADD IMPORTACAOID INTEGER, IMPORTACAOTIPO VARCHAR(20)'
			
			EXECUTE (@QUERY)
			
			-- SERVIDOR DE DESTINO
			SET @QUERY = @PARAMETROS + 'N' + N'''ALTER TABLE ' + @SCHEMA + '.' + @TABELA + ' ADD IMPORTACAOID INTEGER, IMPORTACAOTIPO VARCHAR(20)'''
			
			EXECUTE (@QUERY)
			
			FETCH NEXT FROM CR_CAMPOSIMPORTACAO
			 INTO @SCHEMA, @TABELA
			
		END
		
		/* CAMPO TRATAMENTO */
		DECLARE CR_CAMPOTRATAMENTO CURSOR SCROLL FOR
		SELECT UPPER(TAB1.TABLE_SCHEMA)
			  ,UPPER(TAB1.TABLE_NAME)
		  FROM INFORMATION_SCHEMA.TABLES TAB1
		  JOIN @ESQUEMA TAB2 ON TAB2.ESQUEMA = TAB1.TABLE_SCHEMA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
		 WHERE TAB1.TABLE_TYPE = 'BASE TABLE'
		   AND TAB1.TABLE_SCHEMA != 'HANGFIRE-ECLESIAL'
		   AND TAB1.TABLE_SCHEMA NOT LIKE '%LOG%'
		   AND TAB1.TABLE_NAME NOT LIKE '%DE_PARA_%'
		   AND TAB1.TABLE_SCHEMA + '.' + TABLE_NAME NOT IN (SELECT TABLE_SCHEMA + '.' + TABLE_NAME
														      FROM INFORMATION_SCHEMA.COLUMNS 
														     WHERE TABLE_NAME NOT LIKE 'VIEW%'
														       AND (COLUMN_NAME = 'TRATAMENTO_')
													         GROUP BY TABLE_SCHEMA + '.' + TABLE_NAME)
		   ORDER BY TAB1.TABLE_SCHEMA
			       ,TAB1.TABLE_NAME
				   
		OPEN CR_CAMPOTRATAMENTO
	   FETCH NEXT FROM CR_CAMPOTRATAMENTO
	    INTO @SCHEMA, @TABELA
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
		
			-- SERVIDOR DE ORIGEM
			SET @QUERY = N'ALTER TABLE [' + @BASEORIGEM + '].[' + @SCHEMA + '].' + @TABELA + ' ADD TRATAMENTO_ VARCHAR(30)'
		
			EXECUTE (@QUERY)

			-- ATUALIZA O CAMPO TRATAMENTO
			SET @QUERY = N'UPDATE TAB1
			                  SET TRATAMENTO_ = ''' + @TRATAMENTO + '''
							 FROM [' + @BASEORIGEM + '].[' + @SCHEMA + '].' + @TABELA + ' TAB1'
			
			EXECUTE (@QUERY)

			-- SERVIDOR DE DESTINO
			SET @QUERY = @PARAMETROS + 'N' + N'''ALTER TABLE ' + @SCHEMA + '.' + @TABELA + ' ADD TRATAMENTO_ VARCHAR(30)'''
			
			EXECUTE (@QUERY)

			FETCH NEXT FROM CR_CAMPOTRATAMENTO
			 INTO @SCHEMA, @TABELA
			
		END	
		
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */
		/* CORREÇÃO MANUAL DE CAMPOS SEM FK DE ACORDO COM O SCHEMA A SER MIGRADO ANTES DOS DADOS MIGRADOS */
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */
		
		PRINT 'CORREÇÃO MANUAL DAS REFERÊNCIAS ANTES DOS DADOS MIGRADOS'
		PRINT ''
		
		-- SE A MIGRAÇÃO FOR APENAS PASTORAL, CORRIGI OS DADOS ANTES DA MIGRAÇÃO
		IF NOT EXISTS (SELECT * FROM @ESQUEMA WHERE ESQUEMA = 'DBO')
		BEGIN
		
			PRINT 'TABELA PAROQUIA.COMUNIDADE CAMPO IDCENTROS_CUSTOS...'
			PRINT ''
		
			/* COMUNIDADE */
			SET @QUERY =N'UPDATE TAB1
							 SET IDCENTROS_CUSTOS = NULL
							FROM PAROQUIA.COMUNIDADE TAB1'
			
			EXECUTE (@QUERY)
			
			PRINT 'TABELA DBO.CHEQUE CAMPO MOVIMENTOCONTABILID...'
			PRINT ''
		
			/* CHEQUE */
			SET @QUERY =N'UPDATE TAB1
							 SET MOVIMENTOCONTABILID = NULL
							FROM DBO.CHEQUE TAB1'
			
			EXECUTE (@QUERY)
			
			PRINT 'TABELA PAROQUIA.DIZIMO CAMPO IDREFERENCIACONTABIL,IDBANCOS, ...'
			PRINT ''
			
			/* DIZIMO */		
			SET @QUERY = N'UPDATE TAB1
							  SET IDREFERENCIACONTABIL = NULL
							     ,IDBANCOS = NULL
							 FROM PAROQUIA.DIZIMO TAB1'
			
			EXECUTE (@QUERY)			
			
			PRINT 'TABELA PAROQUIA.FORNECEDOR CAMPO IDCONTA_CONTABIL, IDCONTACONTABILPASSIVO...'
			PRINT ''
			
			/* FORNECEDOR */		
			SET @QUERY = N'UPDATE TAB1
							  SET IDCONTA_CONTABIL = NULL
							     ,IDCONTACONTABILPASSIVO = NULL
							 FROM PAROQUIA.FORNECEDOR TAB1'
			
			EXECUTE (@QUERY)			

			PRINT 'TABELA PAROQUIA.LANCAMENTOCAMPANHA CAMPO IDREFERENCIACONTABIL...'
			PRINT ''		
			
			/* LANCAMENTOCAMPANHA */
			SET @QUERY = N'UPDATE TAB1
							  SET IDREFERENCIACONTABIL = NULL
							 FROM PAROQUIA.LANCAMENTOCAMPANHA TAB1'
			
			EXECUTE (@QUERY)
			
			PRINT 'TABELA PAROQUIA.OFERTATIPO CAMPO IDCLASSIFICACAOFINANCEIRA...'
			PRINT ''		
			
			/* OFERTATIPO */
			SET @QUERY = N'UPDATE TAB1
							  SET IDCLASSIFICACAOFINANCEIRA = NULL
							 FROM PAROQUIA.OFERTATIPO TAB1'
			
			EXECUTE (@QUERY)
			
			PRINT 'TABELA PAROQUIA.RECIBO CAMPO IDREFERENCIACONTABIL...'
			PRINT ''
			
			/* RECIBO */
			SET @QUERY =N'UPDATE TAB1
							 SET IDREFERENCIACONTABIL = NULL
							FROM PAROQUIA.RECIBO TAB1'
			
			EXECUTE (@QUERY)		
		
		END	
		
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */
		/* DELETE DOS DADOS EXISTENTES NA BASE DE DESTINO */
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */
		
		PRINT 'DELETANDO OS DADOS EXISTENTES NA BASE DE DESTINO...'
		PRINT ''
		
		/* FORNECEDOR */
		IF (@TRATARORGANISMOS = 'S')
		BEGIN
		
			SET @QUERY = N'DELETE FROM PAROQUIA.FORNECEDORCONTATO WHERE IDFORNECEDOR IN (SELECT IDFORNECEDOR 
																						   FROM PAROQUIA.FORNECEDOR 
																						  WHERE IDPAROQUIA IN (SELECT TAB2.ID
																												 FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.PAROQUIAS TAB1
																												 JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS TAB2 ON TAB2.CNPJ = TAB1.CNPJ)
																							 OR IDPAROQUIAREPRESENTA IN (SELECT TAB2.ID
																														   FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.PAROQUIAS TAB1
																														   JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS TAB2 ON TAB2.CNPJ = TAB1.CNPJ))'
			
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)	
			
			SET @QUERY = N'DELETE FROM PAROQUIA.FORNECEDORENDERECO WHERE IDFORNECEDOR IN (SELECT IDFORNECEDOR 
																							FROM PAROQUIA.FORNECEDOR 
																						   WHERE IDPAROQUIA IN (SELECT TAB2.ID
																												  FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.PAROQUIAS TAB1
																												  JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS TAB2 ON TAB2.CNPJ = TAB1.CNPJ)
																							  OR IDPAROQUIAREPRESENTA IN (SELECT TAB2.ID
																															FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.PAROQUIAS TAB1
																															JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS TAB2 ON TAB2.CNPJ = TAB1.CNPJ))'
			
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)	
			
			SET @QUERY = N'DELETE 
							 FROM PAROQUIA.FORNECEDOR 
							WHERE IDPAROQUIA IN (SELECT TAB2.ID
												   FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.PAROQUIAS TAB1
												   JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS TAB2 ON TAB2.CNPJ = TAB1.CNPJ)
							   OR IDPAROQUIAREPRESENTA IN (SELECT TAB2.ID
															 FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.PAROQUIAS TAB1
															 JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS TAB2 ON TAB2.CNPJ = TAB1.CNPJ)'
			
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)	
			
		END
		ELSE BEGIN
		
			SET @QUERY = N'DELETE FROM PAROQUIA.FORNECEDORCONTATO WHERE IDFORNECEDOR IN (SELECT IDFORNECEDOR 
																						   FROM PAROQUIA.FORNECEDOR 
																						  WHERE IDPAROQUIA = ' + CAST(@IDPAROQUIA_NEW AS VARCHAR) + '
																							 OR IDPAROQUIAREPRESENTA = ' + CAST(@IDPAROQUIA_NEW AS VARCHAR) + ')'
			
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)	
			
			SET @QUERY = N'DELETE FROM PAROQUIA.FORNECEDORENDERECO WHERE IDFORNECEDOR IN (SELECT IDFORNECEDOR 
																							FROM PAROQUIA.FORNECEDOR 
																						   WHERE IDPAROQUIA = ' + CAST(@IDPAROQUIA_NEW AS VARCHAR) + '
																							  OR IDPAROQUIAREPRESENTA = ' + CAST(@IDPAROQUIA_NEW AS VARCHAR) + ')'
			
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)	
			
			SET @QUERY = N'DELETE 
							 FROM PAROQUIA.FORNECEDOR 
							WHERE IDPAROQUIA = ' + CAST(@IDPAROQUIA_NEW AS VARCHAR) + '
							   OR IDPAROQUIAREPRESENTA = ' + CAST(@IDPAROQUIA_NEW AS VARCHAR) + ''
			
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)		
		
		END
		
		-- SE O SCHEMA DBO FOR MIGRADO
		IF EXISTS (SELECT * FROM @ESQUEMA WHERE ESQUEMA = 'DBO')
		BEGIN
		
			/* CENTROS_CUSTOS */
			IF (@TRATARORGANISMOS = 'S')
			BEGIN
			
				SET @QUERY = N'DELETE FROM DBO.CENTROS_CUSTOS WHERE IDPAROQUIA IN (SELECT TAB2.ID
																					 FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.PAROQUIAS TAB1
																					 JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS TAB2 ON TAB2.CNPJ = TAB1.CNPJ)'
																						  
				SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
				
				EXECUTE (@QUERY)
				
			END
			ELSE BEGIN
			
				SET @QUERY = N'DELETE FROM DBO.CENTROS_CUSTOS WHERE IDPAROQUIA = ' + CAST(@IDPAROQUIA_NEW AS VARCHAR) + ''
																						  
				SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
				
				EXECUTE (@QUERY)
			
			END
			
		END
		
		/* COMUNIDADE */
		IF (@TRATARORGANISMOS = 'S')
		BEGIN

			SET @QUERY = N'DELETE FROM PAROQUIA.COMUNIDADE WHERE IDPAROQUIA IN (SELECT TAB2.ID
																				  FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.PAROQUIAS TAB1
																				  JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS TAB2 ON TAB2.CNPJ = TAB1.CNPJ)'	

			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)
			
		END
		ELSE BEGIN
		
			SET @QUERY = N'DELETE FROM PAROQUIA.COMUNIDADE WHERE IDPAROQUIA = ' + CAST(@IDPAROQUIA_NEW AS VARCHAR) + ''	

			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)
		
		END

		/* ------------------------------------------------------------------------------------------------------------------------- */
		/* INSERÇÃO DOS ORGANISMOS */
		/* ------------------------------------------------------------------------------------------------------------------------- */				
	
		IF(@INSERE_ORGANISMOS = 'S')
		BEGIN
		
			PRINT 'INSERINDO DIOCESES E PARÓQUIAS DA BASE DE ORIGEM NA BASE DE DESTINO...'
			PRINT ''
		
			-- MONTAGEM DA CHAMADA DO PROCEDIMENTO DE INSERT
			SET @QUERY = N'EXECUTE [' + @BASEDESTINO + '].PAROQUIA.STP_INSERTNEWDATABASE ''''DBO''''
																						,''''DIOCESES''''
																						,''''' + @BASEDESTINO + '''''
																						,''''' + @BASEORIGEM + '''''
																						,''''' + @SERVIDORORIGEM + '''''
																						,' + CAST(@TIPOIMPORTACAO AS VARCHAR) + '
																						,''''' + @IMPORTACAOTIPO + '''''
																						,NULL'
																								
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
		
			EXECUTE (@QUERY)
			
			/* ATUALIZANDO O ID DA DIOCESE ANTES DA INSERÇÃO */
			
			SET @QUERY = N'UPDATE TAB1
			                  SET IDDIOCESE = TAB2.ID
							 FROM [' + @BASEORIGEM + '].DBO.PAROQUIAS TAB1
							 JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.DIOCESES TAB2 ON TAB2.IMPORTACAOID = TAB1.IDDIOCESE
							WHERE TAB2.IMPORTACAOTIPO = ''' + @IMPORTACAOTIPO + ''''
							
			EXECUTE (@QUERY)
			
			-- MONTAGEM DA CHAMADA DO PROCEDIMENTO DE INSERT
			SET @QUERY = N'EXECUTE [' + @BASEDESTINO + '].PAROQUIA.STP_INSERTNEWDATABASE ''''DBO''''
																						,''''PAROQUIAS''''
																						,''''' + @BASEDESTINO + '''''
																						,''''' + @BASEORIGEM + '''''
																						,''''' + @SERVIDORORIGEM + '''''
																						,' + CAST(@TIPOIMPORTACAO AS VARCHAR) + '
																						,''''' + @IMPORTACAOTIPO + '''''
																						,NULL'
																										
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
		
			EXECUTE (@QUERY)
			
		END
		
		/* ------------------------------------------------------------------------------------------------------------------------- */
		/* ATUALIZANDO IDPAROQUIA E IDDIOCESE...*/
		/* ------------------------------------------------------------------------------------------------------------------------- */
		
		PRINT 'ATUALIZANDO O CAMPO IDPAROQUIA E O CAMPO IDDIOCESE EM TODAS AS TABELAS PARA OS NOVOS IDS QUE SERÃO USADOS NO DESTINO...' 
		PRINT ''

		IF (@TRATARORGANISMOS = 'S')
		BEGIN			
		
			/* VINCULANDO OS CADASTROS IGUAIS */
			SET @QUERY = N'EXECUTE [' + @BASEORIGEM + '].PAROQUIA.STP_UPDATEPAROQUIADIOCESE @V1, @V2, @V3, @V4, @V5, @V6, @V7'
			
			EXECUTE SP_EXECUTESQL @QUERY
			                     ,N'@V1 NVARCHAR(100)
								   ,@V2 NVARCHAR(100)
								   ,@V3 NVARCHAR(100)
								   ,@V4 NVARCHAR(100)
								   ,@V5 CHAR(1)
								   ,@V6 TABELA READONLY
								   ,@V7 ESQUEMA READONLY'
								  ,@SERVIDORDESTINO
								  ,@BASEDESTINO
								  ,@SERVIDORORIGEM
								  ,@BASEORIGEM
								  ,@TRATARORGANISMOS	
								  ,@IGNORAR
                                  ,@ESQUEMA									  
			
		END
		ELSE BEGIN
		
			/* INFORMANDO PARÓQUIA A PARÓQUIA */
			SET @QUERY = N'EXECUTE [' + @BASEORIGEM + '].PAROQUIA.STP_UPDATEPAROQUIADIOCESE @V1, @V2, @V3, @V4, @V5, @V6, @V7, @V8, @V9, @V10, @V11'
			
			EXECUTE SP_EXECUTESQL @QUERY
			                     ,N'@V1 NVARCHAR(100)
								   ,@V2 NVARCHAR(100)
								   ,@V3 NVARCHAR(100)
								   ,@V4 NVARCHAR(100)
								   ,@V5 CHAR(1)
								   ,@V6 TABELA READONLY
								   ,@V7 ESQUEMA READONLY
								   ,@V8 INTEGER
								   ,@V9 INTEGER
								   ,@V10 INTEGER
								   ,@V11 INTEGER'
								  ,@SERVIDORDESTINO
								  ,@BASEDESTINO
								  ,@SERVIDORORIGEM
								  ,@BASEORIGEM
								  ,@TRATARORGANISMOS	
								  ,@IGNORAR	
								  ,@ESQUEMA
								  ,@IDPAROQUIA_NEW
								  ,@IDPAROQUIA_OLD
								  ,@IDDIOCESE_NEW
			                      ,@IDDIOCESE_OLD
		
		END
		
		/* ------------------------------------------------------------------------------------------------------------------------- */
		/* UPDATE DAS PROFISSÕES */
		/* ------------------------------------------------------------------------------------------------------------------------- */		
		
		PRINT 'VINCULANDO AS PROFISSÕES IGUAIS E INSERINDO AS DIFERENTES...'
		PRINT ''

		IF (@TRATAPROFISSAO = 'S')
		BEGIN			
		
			/* VINCULANDO OS CADASTROS IGUAIS */
			SET @QUERY = N' EXECUTE [' + @BASEORIGEM + '].PAROQUIA.STP_TRATAPROFISSAO ''' + @SERVIDORDESTINO + '''
															                         ,''' + @BASEDESTINO + '''
															                         ,''' + @SERVIDORORIGEM + '''
															                         ,''' + @BASEORIGEM + '''
															                         ,''' + @INSTANCIADIFERENTE + '''
															                         ,' + CAST(@TIPOTRATAMENTO_PROFISSAO AS VARCHAR) + ''
																	  
			EXECUTE (@QUERY)		
		
		END				
		
		/* ------------------------------------------------------------------------------------------------------------------------- */		
		/* VERIFICA SE EXISTE DE_PARA A SER FEITO */
		/* ------------------------------------------------------------------------------------------------------------------------- */		
		
		IF (@DE_PARA_CONTABIL = 'S')
		BEGIN
		
			PRINT 'EFETUANDO O DE_PARA CONTÁBIL...'
			PRINT ''
			
			-- CHAMADA DO PROCEDIMENTO DE DE_PARA CONTÁBIL
			SET @QUERY = N'EXECUTE [' + @BASEORIGEM + '].PAROQUIA.STP_DE_PARA @V1, @V2, @V3, @V4, @V5, @V6'
			
			EXECUTE SP_EXECUTESQL @QUERY
			                     ,N'@V1 NVARCHAR(100)
								   ,@V2 NVARCHAR(100)
								   ,@V3 NVARCHAR(100)
								   ,@V4 NVARCHAR(100)
								   ,@V5 TABELA READONLY
								   ,@V6 ESQUEMA READONLY'
								  ,@SERVIDORDESTINO
								  ,@BASEDESTINO
								  ,@SERVIDORORIGEM
								  ,@BASEORIGEM
								  ,@IGNORAR
								  ,@ESQUEMA

		END
		
		/* ------------------------------------------------------------------------------------------------------------------------- */		
		/* INSERT DAS TABELAS PADRÕES */
		/* ------------------------------------------------------------------------------------------------------------------------- */	
	
		/* INSERT DAS TABELAS PADRÕES */
		DECLARE CR_INSERT CURSOR SCROLL FOR
		SELECT ESQUEMA
		      ,TABELA
		  FROM @PADRAO
		 WHERE ESQUEMA IN (SELECT ESQUEMA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
							 FROM @ESQUEMA)
		   AND ESQUEMA + '.' + TABELA NOT IN (SELECT ESQUEMA + '.' + TABELA COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
							                    FROM @IGNORAR)
		 GROUP BY ESQUEMA
		         ,TABELA
		 ORDER BY ESQUEMA
		         ,TABELA
	
		OPEN CR_INSERT
	   FETCH NEXT FROM CR_INSERT
		INTO @SCHEMA, @TABELA	
		
		PRINT '=================================='
		PRINT 'VERIFICAÇÃO DAS TABELAS PADRÕES...'
		PRINT '=================================='
		PRINT ''	
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
		
			PRINT 'INSERINDO A TABELA |' + @SCHEMA + '.' + @TABELA + '| QUANDO NÃO EXISTIR EXISTIR NO DESTINO'
			PRINT ''
							  
			-- MONTAGEM DA CHAMADA DO PROCEDIMENTO DE INSERT
			SET @QUERY = N'[' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].SYS.SP_EXECUTESQL N''EXECUTE PAROQUIA.STP_INSERTNEWDATABASE ''''' + @SCHEMA + ''''','
																																	  + '''''' + @TABELA + ''''','
																																	  + '''''' + @BASEDESTINO + ''''','
																																	  + '''''' + @BASEORIGEM + ''''','
																																	  + '''''' + @SERVIDORORIGEM + ''''','
																																	      + '' + CAST(@TIPOIMPORTACAO AS VARCHAR) + ','
																																	  + '''''' + @IMPORTACAOTIPO + ''''','
																																	  + 'NULL,'
																																	  + '1''' 

			EXECUTE (@QUERY)
			
			FETCH NEXT FROM CR_INSERT
			 INTO @SCHEMA, @TABELA
	 
		END
		
		CLOSE CR_INSERT
		DEALLOCATE CR_INSERT	

		/* ------------------------------------------------------------------------------------------------------------------------- */		
		/* INSERT DAS TABELAS DE CHAVE PRIMÁRIA ÚNICA E GUID */
		/* ------------------------------------------------------------------------------------------------------------------------- */		
		
		PRINT '========================================================================================'
		PRINT 'CARREGANDO TABELAS A SEREM INSERIDAS COM CHAVE PRIMÁRIA ÚNICA OU GUID...'
		PRINT ''
		
		-- CURSOR QUE GRAVA TODAS AS TABELAS A SEREM INSERIDAS
		DECLARE CR_TABELAS CURSOR SCROLL FOR	 
		 SELECT ESQUEMA
		       ,TABELA
		   FROM ##TABELAS_PK_UNICA_GUID
		  ORDER BY ESQUEMA
		          ,TABELA
				
		-- INICIA O CURSOR DAS TABELAS A SEREM PERCORRIDAS
		 OPEN CR_TABELAS; 
		FETCH NEXT FROM CR_TABELAS 
		 INTO @SCHEMA ,@TABELA 	
		
		/* UPDATE DOS NOVOS IDS */		
		WHILE @@FETCH_STATUS = 0
		BEGIN
		
			PRINT 'TABELA ' + @SCHEMA + '.' + @TABELA + '...'
		
			-- VERIFICA SE EXISTE SEQUENCE PARA A TABELA RECEBIDA
			IF EXISTS (SELECT 1
			             FROM SYS.SEQUENCES TAB1
						 JOIN SYS.TABLES TAB2 ON TAB2.NAME = SUBSTRING(TAB1.NAME, 4, LEN(TAB1.NAME))
						  AND TAB2.SCHEMA_ID = TAB1.SCHEMA_ID
						WHERE UPPER(SCHEMA_NAME(TAB1.SCHEMA_ID)) = '' + @SCHEMA + ''
						  AND UPPER(SUBSTRING(TAB1.NAME, 4, LEN(TAB1.NAME))) = '' + @TABELA + '')

			BEGIN

				PRINT 'GRAVANDO AS NOVAS SEQUÊNCIAS A SEREM USADAS EM ' + @SERVIDORDESTINO + '.' + @BASEDESTINO + '...'

				-- VERIFICA SE O PARAMETRO @IDDIOCESE_NEW FOI PREENCHIDO
				IF (@IDDIOCESE_NEW != NULL)
				BEGIN
				
					-- VERIFICA SE O PARAMETRO @IDPAROQUIA_NEW FOI PREENCHIDO
					IF (@IDPAROQUIA_NEW != NULL)
					BEGIN
						
						-- CHAMADA DO PROCEDIMENTO INFORMANDO @IDDIOCESE_NEW E IDPAROQUIUA_NEW (PARÓQUIA POR PARÓQUIA)
						SET @QUERY = N' EXECUTE [' + @BASEORIGEM + '].PAROQUIA.STP_UPDATENEWID ''' + @SCHEMA + '''
																							  ,''' + @TABELA + '''
																							  ,''' + @BASEDESTINO + '''
																							  ,''' + @BASEORIGEM + '''
																							  ,''' + @SERVIDORORIGEM + '''
																							  ,''' + @SERVIDORDESTINO + '''
																							  ,' + CAST(@IDDIOCESE_NEW AS VARCHAR) + '
																							  ,' + CAST(@IDPAROQUIA_NEW AS VARCHAR) + '															
																							  ,''' + @INSTANCIADIFERENTE + '''
																							  ,NULL'
					
					END
					ELSE BEGIN
					
						-- CHAMADA DO PROCEDIMENTO INFORMANDO @IDDIOCESE_NEW (TODAS AS PARÓQUIAS DA DIOCESE)
						SET @QUERY = N' EXECUTE [' + @BASEORIGEM + '].PAROQUIA.STP_UPDATENEWID ''' + @SCHEMA + '''
																							  ,''' + @TABELA + '''
																							  ,''' + @BASEDESTINO + '''
																							  ,''' + @BASEORIGEM + '''
																							  ,''' + @SERVIDORORIGEM + '''
																							  ,''' + @SERVIDORDESTINO + '''
																							  ,' + CAST(@IDDIOCESE_NEW AS VARCHAR) + '		
																							  ,NULL
																							  ,''' + @INSTANCIADIFERENTE + '''
																							  ,NULL'
					
					END		
				
				END
				ELSE BEGIN

					-- CHAMADA DO PROCEDIMENTO SEM INFORMAR @IDDIOCESE E @IDPAROQUIA (TODOS OS REGISTROS DA TABELA)
					SET @QUERY = N' EXECUTE [' + @BASEORIGEM + '].PAROQUIA.STP_UPDATENEWID ''' + @SCHEMA + '''
																						  ,''' + @TABELA + '''
																						  ,''' + @BASEDESTINO + '''
																						  ,''' + @BASEORIGEM + '''
																						  ,''' + @SERVIDORORIGEM + '''
																						  ,''' + @SERVIDORDESTINO + '''
																						  ,NULL
																						  ,NULL																
																						  ,''' + @INSTANCIADIFERENTE + '''
																						  ,NULL'																  
																	  
				END	
				
				-- EXECUÇÃO DO PROCEDIMENTO
				EXECUTE (@QUERY)

				PRINT 'A TABELA ' + @SCHEMA + '.' + @TABELA + ' FOI ATUALIZADA COM AS NOVAS SEQUÊNCIAS!'
				PRINT ''
				
			END
			ELSE BEGIN
			
				-- SE NÃO FOR UMA TABELA IDENTITY E NEM UMA TABELA COM GUID
				IF ((SELECT COUNT(*)
					   FROM SYS.COLUMNS TAB1 
					   JOIN SYS.TABLES TAB2
					     ON TAB1.OBJECT_ID = TAB2.OBJECT_ID
					  WHERE TAB1.IS_IDENTITY = 1
					    AND TAB2.NAME = '' + @TABELA + ''
					    AND SCHEMA_NAME(TAB2.SCHEMA_ID) = '' + @SCHEMA + '') = 0
														 
					AND
												  
					(SELECT COUNT(*)
					   FROM INFORMATION_SCHEMA.COLUMNS
					  WHERE TABLE_SCHEMA = '' + @SCHEMA + ''
						AND TABLE_NAME = '' + @TABELA + ''
						AND DATA_TYPE = 'UNIQUEIDENTIFIER') = 0) 
							  
				BEGIN
				
					-- GUARDA O NOME DO CAMPO PK
					SET @CAMPOPK = (SELECT COLUMN_NAME
									  FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
									 WHERE CONSTRAINT_NAME LIKE 'PK_%'
									   AND TABLE_SCHEMA = '' + @SCHEMA + ''
									   AND TABLE_NAME = '' + @TABELA + '')
									   
					-- ATUALIZA O IMPORTACAOID COM O MESMO VALOR DO CAMPOPK, POIS A TABELA NAO TEM NADA QUE GERE A SEQUENCIA GRAVADA NA BASE, É FEITO VIA SISTEMA
					SET @QUERY = N'UPDATE TAB1
					                  SET IMPORTACAOID = ' + CAST(@CAMPOPK AS VARCHAR) + '
									 FROM [' + @BASEORIGEM + '].[' + @SCHEMA + '].' + @TABELA + ' TAB1'
									 
					EXECUTE (@QUERY)				
				
				END			
			
			END
			
			PRINT 'INSERINDO A TABELA ' + @SCHEMA + '.' + @TABELA + '...'
				
			-- MONTAGEM DA CHAMADA DO PROCEDIMENTO DE INSERT
			SET @QUERY = N'EXECUTE [' + @BASEDESTINO + '].PAROQUIA.STP_INSERTNEWDATABASE ''''' + @SCHEMA + '''''
																						,''''' + @TABELA + '''''
																						,''''' + @BASEDESTINO + '''''
																						,''''' + @BASEORIGEM + '''''
																						,''''' + @SERVIDORORIGEM + '''''
																						,' + CAST(@TIPOIMPORTACAO AS VARCHAR) + '
																						,''''' + @IMPORTACAOTIPO + '''''
																						,NULL'
																										
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
		
			EXECUTE (@QUERY)

			PRINT 'A TABELA ' + @SCHEMA + '.' + @TABELA + ' FOI INSERIDA COM SUCESSO!'
			PRINT ''
	
			--INCREMENTA O CURSOR
			FETCH NEXT FROM CR_TABELAS
			 INTO @SCHEMA ,@TABELA 
		END	
		
		CLOSE CR_TABELAS
		DEALLOCATE CR_TABELAS
		
		PRINT '========================================================================================'
		PRINT ''
		
		-- TRATAMENTO DOS PERFIS DE USUÁRIOS SE ELES FOREM MANTIDOS
		IF (@CORRIGIR_THEOSDBCENTRAL = 'S')
		BEGIN
		
			PRINT 'EFETUANDO OS TRATAMENTOS NECESSÁRIOS PARA MANTER OS USUÁRIOS...'
			PRINT ''
		
			SET @QUERY = N'
			MERGE [' + @BASEORIGEM + '].PAROQUIA.ITEMMENU AS ORIGEM  
			USING (SELECT IDITEMMENU
						 ,NOMECOMPONENTE
						 ,ORDEM
						 ,VISIBLE
						 ,ACTIONNAME
						 ,FINANCEIRO
						 ,CADASTRO
						 ,TIPO
						 ,CODIGOMENUWEB
						 ,STATE
						 ,USOCURIA
						 ,IMPORTACAOID
					 FROM [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.ITEMMENU) AS DESTINO 
						 (IDITEMMENU,NOMECOMPONENTE,ORDEM,VISIBLE,ACTIONNAME,FINANCEIRO,CADASTRO,TIPO,CODIGOMENUWEB,STATE,USOCURIA,IMPORTACAOID)  
					   ON (ORIGEM.NOMECOMPONENTE = DESTINO.NOMECOMPONENTE
					  AND ORIGEM.ORDEM = DESTINO.ORDEM
					  AND ORIGEM.VISIBLE = DESTINO.VISIBLE
					  AND ORIGEM.ACTIONNAME = DESTINO.ACTIONNAME
					  AND ORIGEM.FINANCEIRO = DESTINO.FINANCEIRO
					  AND ORIGEM.CADASTRO = DESTINO.CADASTRO
					  AND ORIGEM.TIPO = DESTINO.TIPO
					  AND ORIGEM.CODIGOMENUWEB = DESTINO.CODIGOMENUWEB
					  AND ORIGEM.STATE = DESTINO.STATE
					  AND ORIGEM.USOCURIA = DESTINO.USOCURIA)  
					 WHEN MATCHED THEN UPDATE SET ORIGEM.IMPORTACAOID = DESTINO.IDITEMMENU;
					
			UPDATE [' + @BASEORIGEM + '].PAROQUIA.PERFILPERMISSAO
			   SET IDITEMMENU = IMPORTACAOID
			 WHERE IMPORTACAOID IS NOT NULL
			 
			DELETE
			  FROM [' + @BASEORIGEM + '].PAROQUIA.PERFILPERMISSAO
			 WHERE IDITEMMENU NOT IN (SELECT IDITEMMENU
										FROM [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.ITEMMENU)'
										
			EXECUTE (@QUERY)
										
		END
		
		/*  INSERT DAS TABELAS COM PK ÚNICA E TABELAS COM GUID PARA ATUALIZAÇÃO DAS REFERÊNCIAS */
		INSERT INTO ##TABELAS_ATUALIZAR_REFERENCIA (ESQUEMA, TABELA)
		SELECT ESQUEMA
		      ,TABELA
		  FROM ##TABELAS_PK_UNICA_GUID
		
		/*  INSERT DAS TABELAS PADRÕES NA LISTA PARA ATUALIZAÇÃO DAS REFERÊNCIAS */
		INSERT INTO ##TABELAS_ATUALIZAR_REFERENCIA (ESQUEMA, TABELA)
		SELECT TAB1.ESQUEMA
		      ,TAB1.TABELA 
	      FROM @PADRAO TAB1
		  JOIN @ESQUEMA TAB2 ON TAB2.ESQUEMA = TAB1.ESQUEMA	

		/* -------------------------------------------------------------------------------------------------------------------------------------------- */
		/* TRATAMENTO DE TABELAS COM CHAVE COMPOSTA 1 PARA N */
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */  
		
		PRINT 'TRATAMENTO MANUAL DE TABELAS COM PK COMPOSTA 1 PARA N...'
		PRINT ''

		PRINT 'TABELA PAROQUIA.CATEQUISTATURMA'
		PRINT ''
		
		-- PAROQUIA.CATEQUISTATURMA
		SET @QUERY = N'UPDATE TAB1 
						  SET IDCATEQUISTA = TAB2.IDFIEL
							 ,IDTURMACATEQUESE = TAB3.IDTURMACATEQUESE
						 FROM PAROQUIA.CATEQUISTATURMA TAB1
						 JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.FIEL TAB2 ON TAB2.IMPORTACAOID = TAB1.IDCATEQUISTA
						  AND TAB2.TRATAMENTO_ = ''' + @TRATAMENTO + '''
						 JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.TURMACATEQUESE TAB3 ON TAB3.IMPORTACAOID = TAB1.IDTURMACATEQUESE
						  AND TAB3.TRATAMENTO_ = ''' + @TRATAMENTO + ''''
		  
		--EXECUTE (@QUERY)

		SET @QUERY = N'
		ALTER TABLE PAROQUIA.CATEQUISTATURMA DROP CONSTRAINT [PK_CATEQUISTATURMA]'

		EXECUTE (@QUERY)
		
		PRINT 'TABELA PAROQUIA.CURSOPARTICIPANTE'
		PRINT ''
		
		-- PAROQUIA.CURSOPARTICIPANTE
		SET @QUERY = N'UPDATE TAB1 
						  SET IDCURSO = TAB2.IDCURSO
							 ,IDPARTICIPANTE = TAB3.IDPARTICIPANTE
						 FROM PAROQUIA.CURSOPARTICIPANTE TAB1
						 JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.CURSO TAB2 ON TAB2.IMPORTACAOID = TAB1.IDCURSO
						  AND TAB2.TRATAMENTO_ = ''' + @TRATAMENTO + '''
						 JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.PARTICIPANTE TAB3 ON TAB3.IMPORTACAOID = TAB1.IDPARTICIPANTE
						  AND TAB3.TRATAMENTO_ = ''' + @TRATAMENTO + ''''
		  
		--EXECUTE (@QUERY)

		SET @QUERY = N'
		ALTER TABLE PAROQUIA.CURSOPARTICIPANTE DROP CONSTRAINT [PK_CURSOPARTICIPANTE]'

		EXECUTE (@QUERY)

		/* -------------------------------------------------------------------------------------------------------------------------------------------- */
		/* UPDATE DAS REFERÊNCIAS */
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */

		PRINT 'EFETUANDO A ATUALIZAÇÃO DAS REFERÊNCIAS DAS TABELAS INSERIDAS COM CHAVE PRIMÁRIA ÚNICA..'
		PRINT ''
		
		-- CURSOR QUE GRAVA TODAS AS TABELAS A SEREM INSERIDAS
		DECLARE CR_TABELAS CURSOR SCROLL FOR	
		 SELECT ESQUEMA
		       ,TABELA
		   FROM ##TABELAS_ATUALIZAR_REFERENCIA		  
		  ORDER BY ESQUEMA
		          ,TABELA		
				
		-- INICIA O CURSOR DAS TABELAS A SEREM PERCORRIDAS
		 OPEN CR_TABELAS; 
		FETCH NEXT FROM CR_TABELAS 
		 INTO @SCHEMA ,@TABELA 

		WHILE @@FETCH_STATUS = 0
		BEGIN 		
		
			/* ATUALIZAÇÃO DAS REFERÊNCIAS DAS TABELAS JÁ INSERIDAS E DAS QUE TABELAS COM PK COMPOSTAS QUE PRECISAM DAS NOVAS SEQUÊNCIAS PARA SEREM INSERIDAS */
			SET @QUERY = N'EXECUTE [' + @BASEDESTINO + '].PAROQUIA.STP_UPDATEREFERENCIAS ''''' + @SCHEMA + '''''
			                                                                            ,''''' + @TABELA + '''''
						                                                                ,''''' + @BASEDESTINO + '''''
						                                                                ,''''' + @BASEORIGEM + '''''
						                                                                ,''''' + @SERVIDORDESTINO + '''''
						                                                                ,''''' + @SERVIDORORIGEM + '''''
                                                                                          ,''' + @SCHEMA_UPDATE_DESTINO + '''																						
						                                                                ,''''' + @INSTANCIADIFERENTE + '''''
						                                                                ,''''' + @TRATAMENTO + '''''
						                                                                ,''''' + @IMPORTACAOTIPO + ''''''		
																						
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
		
			EXECUTE (@QUERY)

			PRINT 'A TABELA ' + @SCHEMA + '.' + @TABELA + ' FOI ATUALIZADA COM AS NOVAS REFERÊNCIAS!'
			
			--INCREMENTA O CURSOR
			FETCH NEXT FROM CR_TABELAS
			 INTO @SCHEMA ,@TABELA
			
		END	

		-- FECHA E DESALOCA O CURSOR
		CLOSE CR_TABELAS
		DEALLOCATE CR_TABELAS;	
		
		PRINT ''
		PRINT '===================================================================================='
		PRINT ''		

		/* -------------------------------------------------------------------------------------------------------------------------------------------- */
		/* CURSOR QUE GUARDA TODAS AS TABELAS COM PK COMPOSTA */
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */
		
		PRINT 'CARREGANDO TABELAS A SEREM INSERIDAS COM CHAVE PRIMÁRIA COMPOSTA...'
		PRINT ''

		DECLARE CR_TABELAS CURSOR SCROLL FOR	
		 SELECT ESQUEMA
		       ,TABELA
		   FROM ##TABELAS_PK_COMPOSTA
		  ORDER BY ESQUEMA
		          ,TABELA	

		-- INICIA O CURSOR DAS TABELAS A SEREM PERCORRIDAS
		 OPEN CR_TABELAS; 
		FETCH NEXT FROM CR_TABELAS 
		 INTO @SCHEMA ,@TABELA
		 
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */
		/* INSERT DAS TABELAS COM CHAVE COMPOSTA NO DESTINO */
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */ 
 
		PRINT '========================================================================'
		PRINT 'EFETUANDO O INSERT DAS TABELAS COM CHAVE PRIMÁRIA COMPOSTA...'
		PRINT ''

		WHILE @@FETCH_STATUS = 0
		BEGIN
		
			PRINT 'INSERINDO A TABELA ' + @SCHEMA + '.' + @TABELA + '...'

			-- MONTAGEM DA CHAMADA DO PROCEDIMENTO DE INSERT
			SET @QUERY = N'EXECUTE [' + @BASEDESTINO + '].PAROQUIA.STP_INSERTNEWDATABASE ''''' + @SCHEMA + '''''
																						,''''' + @TABELA + '''''
																						,''''' + @BASEDESTINO + '''''
																						,''''' + @BASEORIGEM + '''''
																						,''''' + @SERVIDORORIGEM + '''''
																						,' + CAST(@TIPOIMPORTACAO AS VARCHAR) + '
																						,''''' + @IMPORTACAOTIPO + '''''
																						,NULL'
																											
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
		
			EXECUTE (@QUERY)

			PRINT 'A TABELA ' + @SCHEMA + '.' + @TABELA + ' FOI INSERIDA COM SUCESSO!'
			PRINT ''
			
			FETCH NEXT FROM CR_TABELAS
			 INTO @SCHEMA ,@TABELA 

		END

		PRINT '========================================================================'

		-- FECHA E DESALOCA O CURSOR
		CLOSE CR_TABELAS
		DEALLOCATE CR_TABELAS				

		/* ------------------------------------------------------------------------------------------------------------------------- */
		/* CORREÇÃO MANUAL DE CAMPOS SEM FK DE ACORDO COM O SCHEMA A SER MIGRADO APÓS OS DADOS MIGRADOS */
		/* ------------------------------------------------------------------------------------------------------------------------- */
			
		PRINT 'CORREÇÃO MANUAL DAS REFERÊNCIAS APÓS OS DADOS MIGRADOS'
		PRINT ''
		
		PRINT 'TABELA PAROQUIA.FIELCASAL CAMPO IDFIELESPOSA...'
		PRINT ''
		
		/* FIELESPOSA */
		SET @QUERY = N'UPDATE TAB1
						  SET IDFIELESPOSA = TAB2.IDFIEL
						 FROM PAROQUIA.FIELCASAL TAB1
						 JOIN PAROQUIA.FIEL TAB2 ON TAB2.IMPORTACAOID = TAB1.IDFIELESPOSA 
						  AND TAB2.IDPAROQUIA = TAB1.IDPAROQUIA AND TAB2.TRATAMENTO_ = TAB1.TRATAMENTO_
						WHERE TAB2.TRATAMENTO_ = ''''' + @TRATAMENTO + ''''''
			
		SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
		
		EXECUTE (@QUERY)
		
		PRINT 'TABELA PAROQUIA.FIELCASAL CAMPO IDFIELESPOSO...'
		PRINT ''
		
		/* FIELESPOSO */
		SET @QUERY = N'UPDATE TAB1
						  SET IDFIELESPOSO = TAB2.IDFIEL
						 FROM PAROQUIA.FIELCASAL TAB1
						 JOIN PAROQUIA.FIEL TAB2 ON TAB2.IMPORTACAOID = TAB1.IDFIELESPOSO 
						  AND TAB2.IDPAROQUIA = TAB1.IDPAROQUIA AND TAB2.TRATAMENTO_ = TAB1.TRATAMENTO_
						WHERE TAB2.TRATAMENTO_ = ''''' + @TRATAMENTO + ''''''
			
		SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
		
		EXECUTE (@QUERY)
		
		-- SE O SCHEMA DBO FOR MIGRADO, ATUALIZA PARA AS NOVAS REFERÊNCIAS INSERIDAS, SENÃO, ATUALIZA PARA NULO
		IF EXISTS(SELECT * FROM @ESQUEMA WHERE ESQUEMA = 'DBO')
		BEGIN
		
			/* CHEQUE */
			SET @QUERY =N'UPDATE TAB1
							 SET MOVIMENTOCONTABILID = TAB2.ID
							FROM DBO.CHEQUE TAB1
							JOIN DBO.MOVIMENTO_CONTABIL TAB2 ON TAB2.IMPORTACAOID = TAB1.MOVIMENTOCONTABILID
							 AND TAB2.IDPAROQUIA = TAB1.PAROQUIAID AND TAB2.TRATAMENTO_ = TAB1.TRATAMENTO_
						   WHERE TAB2.TRATAMENTO_ = ''''' + @TRATAMENTO + ''''''
						   
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)
			
			PRINT 'TABELA PAROQUIA.DIZIMO CAMPO IDREFERENCIACONTABIL...'
			PRINT ''
			
			/* DIZIMO */		
			SET @QUERY = N'UPDATE TAB1
							  SET IDREFERENCIACONTABIL = TAB2.ID
							 FROM PAROQUIA.DIZIMO TAB1
							 JOIN DBO.INTEGRACAOPAROQUIA TAB2 ON TAB2.IMPORTACAOID = TAB1.IDREFERENCIACONTABIL 
							  AND TAB2.TRATAMENTO_ = TAB1.TRATAMENTO_
							WHERE TAB1.TRATAMENTO_ = ''''' + @TRATAMENTO + ''''''
							
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)		

			PRINT 'TABELA PAROQUIA.DIZIMO CAMPO IDBANCOS...'
			PRINT ''
			
			/* DIZIMO */		
			SET @QUERY = N'UPDATE TAB1
							  SET IDBANCOS = TAB2.ID
							 FROM PAROQUIA.DIZIMO TAB1
							 JOIN DBO.BANCOS TAB2 ON TAB2.IMPORTACAOID = TAB1.IDBANCOS 
							  AND TAB2.TRATAMENTO_ = TAB1.TRATAMENTO_
							WHERE TAB1.TRATAMENTO_ = ''''' + @TRATAMENTO + ''''''
							
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)

			PRINT 'TABELA PAROQUIA.LANCAMENTOCAMPANHA CAMPO IDREFERENCIACONTABIL...'
			PRINT ''		
			
			/* LANCAMENTOCAMPANHA */
			SET @QUERY = N'UPDATE TAB1
							  SET IDREFERENCIACONTABIL = TAB2.ID
							 FROM PAROQUIA.LANCAMENTOCAMPANHA TAB1
							 JOIN DBO.INTEGRACAOPAROQUIA TAB2 ON TAB2.IMPORTACAOID = TAB1.IDREFERENCIACONTABIL 
							  AND TAB2.TRATAMENTO_ = TAB1.TRATAMENTO_
							WHERE TAB2.TRATAMENTO_ = ''''' + @TRATAMENTO + ''''''
							
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)
			
			/* RECIBO */
			SET @QUERY =N'UPDATE TAB1
							 SET IDREFERENCIACONTABIL = TAB2.ID
							FROM PAROQUIA.RECIBO TAB1
							JOIN DBO.INTEGRACAOPAROQUIA TAB2 ON TAB2.IMPORTACAOID = TAB1.IDREFERENCIACONTABIL 
							 AND TAB2.TRATAMENTO_ = TAB1.TRATAMENTO_
						   WHERE TAB2.TRATAMENTO_ = ''''' + @TRATAMENTO + ''''''
						   
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''
			
			EXECUTE (@QUERY)
			
		END 	

		-- SE FOR NECESSÁRIO FAZER A ALTERAÇÃO OU EXCLUSÃO DO ORGANISMO E USUÁRIOS NA THEOSDBCENTRAL
		IF (@CORRIGIR_THEOSDBCENTRAL = 'S')
		BEGIN
	
			-- ATUALIZAR
			IF (@TRATAMENTO_THEOSDBCENTRAL = 0)
			BEGIN
			
				PRINT 'EFETUANDO A ATUALIZAÇÃO DE REFERÊNCIAS NA THEOSDBCENTRAL...'
				PRINT ''
		
				SET @QUERY = N'
				DECLARE @IDDIOCESE_NEW INTEGER
				DECLARE @IDDIOCESE_OLD INTEGER
				DECLARE @CNPJ VARCHAR(14)
				DECLARE @IDPAROQUIA_OLD INTEGER
				DECLARE @IDPAROQUIA_NEW INTEGER
				DECLARE @IDUSUARIO_OLD INTEGER
				DECLARE @IDUSUARIO_NEW INTEGER
			
				/* CURSOR COM A DIOCESE */

				DECLARE CR_DIOCESES CURSOR FAST_FORWARD FOR
				 SELECT TAB1.ID
				       ,TAB2.ID
					   ,TAB2.CNPJ
				   FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.DIOCESES TAB1
				   JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.DIOCESES TAB2 ON TAB2.CNPJ = TAB1.CNPJ
			   
				 OPEN CR_DIOCESES
				FETCH NEXT FROM CR_DIOCESES
				 INTO @IDDIOCESE_OLD
				     ,@IDDIOCESE_NEW
					 ,@CNPJ
			 
				WHILE @@FETCH_STATUS = 0
				BEGIN					
				
					/* ATUALIZAÇÃO DO BANCO E DO IDORIGINAL */
				
					UPDATE TAB1 
					   SET BANCO = ''' + @BASEDESTINO + '''
						  ,IDORIGINAL = @IDDIOCESE_NEW
					  FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.DIOCESES TAB1
					 WHERE TAB1.BANCO = ''' + @BASEORIGEM + '''
					   AND TAB1.CNPJ = @CNPJ
					   AND TAB1.IDORIGINAL = @IDDIOCESE_OLD
					
					/* CURSOR COM AS PAROQUIAS */
					
					DECLARE CR_PAROQUIAS CURSOR FAST_FORWARD FOR
					 SELECT TAB1.ID 
					       ,TAB2.ID
						   ,TAB2.CNPJ
					   FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.PAROQUIAS TAB1
					   JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS TAB2 ON TAB2.CNPJ = TAB1.CNPJ
					  WHERE TAB2.IDDIOCESE = @IDDIOCESE_NEW
				   
					 OPEN CR_PAROQUIAS
					FETCH NEXT FROM CR_PAROQUIAS
					 INTO @IDPAROQUIA_OLD
					     ,@IDPAROQUIA_NEW
						 ,@CNPJ
				 
					WHILE @@FETCH_STATUS = 0
					BEGIN			

						/* ATUALIZAÇÃO DO IDORIGINAL */
					
						UPDATE TAB1 
						   SET IDORIGINAL = @IDPAROQUIA_NEW
						  FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.PAROQUIAS TAB1
						 WHERE (TAB1.CNPJ = @CNPJ
							OR TAB1.IDORIGINAL = @IDPAROQUIA_OLD)				   
				
						/* CURSOR COM OS USUARIOS */
						
						DECLARE CR_USUARIOS CURSOR FAST_FORWARD FOR
						 SELECT TAB1.IDUSUARIO
						       ,TAB2.IDUSUARIO
						   FROM [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].PAROQUIA.USUARIO TAB1
						   JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.USUARIO TAB2 ON TAB2.IMPORTACAOID = TAB1.IDUSUARIO
						    AND TAB2.TRATAMENTO_ = ''' + @TRATAMENTO + '''
					   
						 OPEN CR_USUARIOS
						FETCH NEXT FROM CR_USUARIOS
						 INTO @IDUSUARIO_OLD
					         ,@IDUSUARIO_NEW					 
					 
						WHILE @@FETCH_STATUS = 0
						BEGIN			
					
							/* ATUALIZAÇÃO DO IDORIGINAL */
						
							UPDATE TAB1 
							   SET IDORIGINAL = @IDUSUARIO_NEW
							  FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].PAROQUIA.USUARIO TAB1
							 WHERE TAB1.IDPAROQUIA IN (SELECT ID
														 FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.PAROQUIAS
														WHERE CNPJ = @CNPJ
														  AND IDORIGINAL = @IDPAROQUIA_NEW)
							   AND TAB1.IDORIGINAL = @IDUSUARIO_OLD
						   
							FETCH NEXT FROM CR_USUARIOS
							 INTO @IDUSUARIO_OLD
					             ,@IDUSUARIO_NEW
						
						END
				
						CLOSE CR_USUARIOS
						DEALLOCATE CR_USUARIOS						
						
						FETCH NEXT FROM CR_PAROQUIAS
						 INTO @IDPAROQUIA_OLD
						     ,@IDPAROQUIA_NEW
						     ,@CNPJ
					
					END
				
					CLOSE CR_PAROQUIAS
					DEALLOCATE CR_PAROQUIAS				
				
					FETCH NEXT FROM CR_DIOCESES
					 INTO @IDDIOCESE_OLD
					     ,@IDPAROQUIA_NEW
					     ,@CNPJ
				 
				END
				
				CLOSE CR_DIOCESES
				DEALLOCATE CR_DIOCESES'
			
				EXECUTE (@QUERY)	
		
			END
		
			-- EXCLUSÃO
			ELSE BEGIN
			
				PRINT 'EFETUANDO A EXCLUSÃO DO ORGANISMO DA THEOSDBCENTRAL...'
				PRINT ''
		
				SET @QUERY = N'
				DECLARE @IDDIOCESE INTEGER
				DECLARE @CNPJ VARCHAR(14)
				DECLARE @IDPAROQUIA INTEGER
				DECLARE @IDUSUARIO INTEGER
				DECLARE @QUERY NVARCHAR(MAX)

				/* CURSOR COM A DIOCESE */
			
				DECLARE CR_DIOCESES CURSOR FAST_FORWARD FOR
				 SELECT TAB1.ID
				   FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.DIOCESES TAB1
				   JOIN [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.DIOCESES TAB2 ON TAB2.CNPJ = TAB1.CNPJ
				  WHERE TAB1.IDORIGINAL = TAB2.ID
				    AND TAB1.BANCO = ''' + @BASEORIGEM + '''
			   
				 OPEN CR_DIOCESES
				FETCH NEXT FROM CR_DIOCESES
				 INTO @IDDIOCESE
			 
				WHILE @@FETCH_STATUS = 0
				BEGIN	
					
					/* CURSOR COM AS PAROQUIAS */
					
					DECLARE CR_PAROQUIAS CURSOR FAST_FORWARD FOR
					 SELECT TAB1.ID
					   FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.PAROQUIAS TAB1
					   JOIN [' + @SERVIDORORIGEM + '].[' + @BASEORIGEM + '].DBO.PAROQUIAS TAB2 ON TAB2.CODEXPORTACAO = TAB1.CODEXPORTACAO OR TAB1.CNPJ = TAB2.CNPJ
					  WHERE TAB1.IDDIOCESE = @IDDIOCESE
				   
					 OPEN CR_PAROQUIAS
					FETCH NEXT FROM CR_PAROQUIAS
					 INTO @IDPAROQUIA
				 
					WHILE @@FETCH_STATUS = 0
					BEGIN			
				
						/* CURSOR COM OS USUARIOS */
						
						DECLARE CR_USUARIOS CURSOR FAST_FORWARD FOR
						 SELECT IDUSUARIO
						   FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].PAROQUIA.USUARIO
						  WHERE IDPAROQUIA = @IDPAROQUIA
					   
						 OPEN CR_USUARIOS
						FETCH NEXT FROM CR_USUARIOS
						 INTO @IDUSUARIO
					 
						WHILE @@FETCH_STATUS = 0
						BEGIN			
					
							/* DELETE DO USUÁRIO */
						
							SET @QUERY = ''DELETE OPENQUERY ([' + @INSTANCIA_THEOSDBCENTRAL + '], ''''SELECT IDUSUARIO
																										FROM [' + @BASE_THEOSDBCENTRAL + '].PAROQUIA.USUARIO
																									   WHERE IDUSUARIO = '' + CAST(@IDUSUARIO AS VARCHAR) + '''''')''
						
							EXECUTE (@QUERY)				
						
							FETCH NEXT FROM CR_USUARIOS
							 INTO @IDUSUARIO
						
						END
				
						CLOSE CR_USUARIOS
						DEALLOCATE CR_USUARIOS
					
						SET @QUERY = ''DELETE OPENQUERY ([' + @INSTANCIA_THEOSDBCENTRAL + '], ''''SELECT ID
																									FROM [' + @BASE_THEOSDBCENTRAL + '].DBO.PAROQUIAS
																								   WHERE ID = '' + CAST(@IDPAROQUIA AS VARCHAR) + '''''')''
						
						EXECUTE (@QUERY)
				   
						FETCH NEXT FROM CR_PAROQUIAS
						 INTO @IDPAROQUIA
					
					END
				
					CLOSE CR_PAROQUIAS
					DEALLOCATE CR_PAROQUIAS
				
					IF NOT EXISTS (SELECT * FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.PAROQUIAS WHERE IDDIOCESE = @IDDIOCESE)
					BEGIN
				
						SET @QUERY = ''DELETE OPENQUERY ([' + @INSTANCIA_THEOSDBCENTRAL + '], ''''SELECT ID
																									FROM [' + @BASE_THEOSDBCENTRAL + '].DBO.DIOCESES
																								   WHERE ID = '' + CAST(@IDDIOCESE AS VARCHAR) + '''''')''
						
						EXECUTE (@QUERY)
					
					END
				
					FETCH NEXT FROM CR_DIOCESES
					 INTO @IDDIOCESE
				 
				END
				
				CLOSE CR_DIOCESES
				DEALLOCATE CR_DIOCESES'
			
				EXECUTE (@QUERY)	
		
			END
	
		END
		
		-- INSERÇÃO NA THEOSDBCENTRAL
		IF (@INSERIR_THEOSDBCENTRAL = 'S')
		BEGIN
		
			PRINT 'INSERINDO O(S) NOVO(S) ORGANISMO(S) NA THEOSDBCENTRAL...'
			PRINT ''
	
			SET @QUERY = N'
			DECLARE @IDDIOCESE INTEGER			
			DECLARE @CNPJ VARCHAR(14)

			/* DIOCESES */

			DECLARE CR_DIOCESES CURSOR FAST_FORWARD FOR
			 SELECT ID
			       ,CNPJ
			   FROM [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.[DIOCESES]

			OPEN CR_DIOCESES
		   FETCH NEXT FROM CR_DIOCESES
		    INTO @IDDIOCESE
			    ,@CNPJ

			WHILE @@FETCH_STATUS = 0
			BEGIN
		
				/* VERIFICA SE EXISTE A DIOCESE CRIADA NA THEOSDBCENTRAL */
				IF NOT EXISTS(SELECT *
								FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.[DIOCESES]
							   WHERE BANCO = ''' + @BASEDESTINO + '''
								 AND IDORIGINAL = @IDDIOCESE
								 AND CNPJ = @CNPJ)
				BEGIN
			
					INSERT INTO [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.[DIOCESES]
							   ([IDORIGINAL]
							   ,[RAZAO_SOCIAL]
							   ,[NOME_FANTASIA]
							   ,[BAIRRO]
							   ,[CIDADE]
							   ,[COMPLEMENTO]
							   ,[UF]
							   ,[CAIXA_POSTAL]
							   ,[CEP]
							   ,[CODIGO_IBGE]
							   ,[CNPJ]
							   ,[EMAIL]
							   ,[NIRE]
							   ,[BISPO]
							   ,[DIOCESEPROVINCIA]
							   ,[MAQUINA]
							   ,[INSTANCIA]
							   ,[BANCO]
							   ,[ACESSOADMTHEOS]
							   ,[HOSTNAME])
						 SELECT @IDDIOCESE
							   ,(SELECT RAZAO_SOCIAL
								   FROM [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.[DIOCESES]
								  WHERE ID = @IDDIOCESE)
							   ,(SELECT RAZAO_SOCIAL
								   FROM [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.[DIOCESES]
								  WHERE ID = @IDDIOCESE)
							   ,TAB1.BAIRRO
							   ,TAB1.CIDADE
							   ,TAB1.COMPLEMENTO
							   ,TAB1.UF
							   ,TAB1.CAIXA_POSTAL
							   ,TAB1.CEP
							   ,TAB1.CODIGO_IBGE
							   ,TAB1.CNPJ
							   ,TAB1.EMAIL
							   ,TAB1.NIRE
							   ,TAB1.BISPO
							   ,TAB1.DIOCESEPROVINCIA
							   ,''' + @BASEDESTINO + '''
							   ,''PRODUCAO''
							   ,''DATABASE''
							   ,0
							   ,''' + @HOSTNAME + '''
						   FROM [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.[DIOCESES] TAB1				  
						  WHERE TAB1.ID = @IDDIOCESE			
			
				END

				FETCH NEXT FROM CR_DIOCESES
				 INTO @IDDIOCESE
				     ,@CNPJ
			 			
			END		

			CLOSE CR_DIOCESES
			DEALLOCATE CR_DIOCESES'
			
			EXECUTE (@QUERY)
			
			SET @QUERY = N'
			DECLARE @IDPAROQUIA INTEGER
			DECLARE @IDDIOCESE INTEGER
			
			/* PAROQUIAS */

			DECLARE CR_PAROQUIAS CURSOR FAST_FORWARD FOR
			 SELECT ID
			   FROM [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS

			OPEN CR_PAROQUIAS
			FETCH NEXT FROM CR_PAROQUIAS
			 INTO @IDPAROQUIA

			WHILE @@FETCH_STATUS = 0
			BEGIN

				SET @IDDIOCESE = (SELECT TAB1.ID
									FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.DIOCESES TAB1
									JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.DIOCESES TAB2 ON TAB2.ID = TAB1.IDORIGINAL
									JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.PAROQUIAS TAB3 ON TAB3.IDDIOCESE = TAB2.ID
								   WHERE TAB1.BANCO = ''' + @BASEDESTINO + '''
								   GROUP BY TAB1.ID)
		
				/* VERIFICA SE EXISTE A PAROQUIA CRIADA NA THEOSDBCENTRAL */
				IF NOT EXISTS(SELECT *
								FROM [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.PAROQUIAS
							   WHERE IDORIGINAL = @IDPAROQUIA
								 AND IDDIOCESE = @IDDIOCESE)
				BEGIN				
			
					INSERT INTO [' + @INSTANCIA_THEOSDBCENTRAL + '].[' + @BASE_THEOSDBCENTRAL + '].DBO.PAROQUIAS
							   ([IDORIGINAL]
							   ,[IDDIOCESE]
							   ,[CODIGO]
							   ,[RAZAO_SOCIAL]
							   ,[CNPJ]
							   ,[ATIVO]
							   ,[TELEFONE]
							   ,[FAX]
							   ,[EMAIL]
							   ,[BAIRRO]
							   ,[CIDADE]
							   ,[UF]
							   ,[PERIODO_INICIAL_CONTABILIDADE]
							   ,[PERIODO_FINAL_CONTABILIDADE]
							   ,[IDTIPOORGANISMO]
							   ,[CODEXPORTACAO])
						 SELECT @IDPAROQUIA
							   ,@IDDIOCESE
							   ,TAB1.CODIGO
							   ,TAB1.RAZAO_SOCIAL
							   ,TAB1.CNPJ
							   ,1
							   ,TAB3.DESCRICAO
							   ,TAB5.DESCRICAO
							   ,TAB7.DESCRICAO
							   ,TAB1.BAIRRO
							   ,TAB1.CIDADE
							   ,TAB1.UF
							   ,TAB1.PERIODO_INICIAL_CONTABILIDADE
							   ,TAB1.PERIODO_FINAL_CONTABILIDADE
							   ,TAB1.IDTIPOORGANISMO
							   ,TAB1.CODEXPORTACAO
						   FROM [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].DBO.[PAROQUIAS] TAB1
					  LEFT JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.[PAROQUIASCONTATO] TAB2 ON TAB2.IDPAROQUIA = TAB1.ID AND TAB2.IDCONTATOTIPO = 1
					  LEFT JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.[CONTATO] TAB3 ON TAB3.IDCONTATO = TAB2.IDCONTATO 
					  LEFT JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.[PAROQUIASCONTATO] TAB4 ON TAB4.IDPAROQUIA = TAB1.ID AND TAB4.IDCONTATOTIPO = 4
					  LEFT JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.[CONTATO] TAB5 ON TAB5.IDCONTATO = TAB4.IDCONTATO 
					  LEFT JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.[PAROQUIASCONTATO] TAB6 ON TAB6.IDPAROQUIA = TAB1.ID AND TAB6.IDCONTATOTIPO = 5
					  LEFT JOIN [' + @SERVIDORDESTINO + '].[' + @BASEDESTINO + '].PAROQUIA.[CONTATO] TAB7 ON TAB7.IDCONTATO = TAB6.IDCONTATO 
						  WHERE TAB1.ID = @IDPAROQUIA

				END

				FETCH NEXT FROM CR_PAROQUIAS
				 INTO @IDPAROQUIA
			
			END

			CLOSE CR_PAROQUIAS
			DEALLOCATE CR_PAROQUIAS'
			
			EXECUTE (@QUERY)
			 			
		END	

		/* --------------------------------------------------- */
		/* HABILITANDO OS ÍNDICES UNIQUES */
		/* --------------------------------------------------- */

		PRINT 'HABILITANDO OS ÍNDICES UNIQUES NA BASE DE DESTINO...'
		PRINT ''

		FETCH FIRST FROM CR_INDEX
		INTO @INDEX
			,@SCHEMA
			,@TABELA

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @QUERY = N'ALTER INDEX ' + @INDEX + ' ON ' + @SCHEMA + '.' + @TABELA + ' REBUILD;'
			
			SET @QUERY = @PARAMETROS + 'N''' + @QUERY + ''''

			EXECUTE(@QUERY)

			FETCH NEXT FROM CR_INDEX
			 INTO @INDEX
				 ,@SCHEMA
				 ,@TABELA
		END	

		CLOSE CR_INDEX
		DEALLOCATE CR_INDEX
		
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */
		/* DROP DOS CAMPOS DE IMPORTAÇÃO */
		/* -------------------------------------------------------------------------------------------------------------------------------------------- */

		PRINT 'DROP DOS CAMPOS CRIADOS PARA A IMPORTAÇÃO NA BASE DESTINO...'
		PRINT ''

		/* DROP DOS CAMPOS IMPORTACAOID, IMPORTACAOTIPO E TRATAMENTO NAS TABELAS QUE NÃO EXISTEM */
		IF (@TIPOIMPORTACAO = 0)
		BEGIN
			
			/* CAMPOS IMPORTACAOID E IMPORTACAOTIPO */
			FETCH FIRST FROM CR_CAMPOSIMPORTACAO
			INTO @SCHEMA, @TABELA
				
			WHILE @@FETCH_STATUS = 0
			BEGIN
				
				-- SERVIDOR DE ORIGEM
				SET @QUERY = N'ALTER TABLE [' + @BASEORIGEM + '].[' + @SCHEMA + '].' + @TABELA + ' DROP COLUMN IMPORTACAOID, IMPORTACAOTIPO'
					
				--EXECUTE (@QUERY)
					
				-- SERVIDOR DE DESTINO
				SET @QUERY = @PARAMETROS + 'N' + N'''ALTER TABLE ' + @SCHEMA + '.' + @TABELA + ' DROP COLUMN IMPORTACAOID, IMPORTACAOTIPO'''
					
				EXECUTE (@QUERY)
					
				-- INCREMENTA O CURSOR
				FETCH NEXT FROM CR_CAMPOSIMPORTACAO
					INTO @SCHEMA, @TABELA
					 
			END
				
			-- FECHA E DESALOCA O CURSOR
			CLOSE CR_CAMPOSIMPORTACAO
			DEALLOCATE CR_CAMPOSIMPORTACAO
				
			/* CAMPO TRATAMENTO */
			FETCH FIRST FROM CR_CAMPOTRATAMENTO
				INTO @SCHEMA, @TABELA
				
			WHILE @@FETCH_STATUS = 0
			BEGIN
				
				-- SERVIDOR DE ORIGEM
				SET @QUERY = N'ALTER TABLE [' + @BASEORIGEM + '].[' + @SCHEMA + '].' + @TABELA + ' DROP COLUMN TRATAMENTO_'
				
				--EXECUTE (@QUERY)
					
				-- SERVIDOR DE DESTINO
				SET @QUERY = @PARAMETROS + 'N' + N'''ALTER TABLE ' + @SCHEMA + '.' + @TABELA + ' DROP COLUMN TRATAMENTO_'''
					
				EXECUTE (@QUERY)
					
				-- INCREMENTA O CURSOR
				FETCH NEXT FROM CR_CAMPOTRATAMENTO
				 INTO @SCHEMA, @TABELA
					
			END
				
			-- FECHA E DESALOCA O CURSOR
			CLOSE CR_CAMPOTRATAMENTO
			DEALLOCATE CR_CAMPOTRATAMENTO
				
		END			
		
		/* DROP DOS CAMPOS FKS CRIADOS */
		FETCH FIRST FROM CR_FKS
		 INTO @SCHEMA, @TABELA, @CAMPOFK, @ORGANISMO
		 
		PRINT 'DELETANDO FOREIGN_KEYS CRIADAS DURANTE A MIGRAÇÃO...'
		PRINT ''
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			
			-- DROP DA FK
			SET @QUERY = N'ALTER TABLE ' + @SCHEMA + '.' + @TABELA + ' DROP CONSTRAINT [FK_' + @TABELA + '_' + @ORGANISMO + ']'	

			EXECUTE (@QUERY)
		
			FETCH NEXT FROM CR_FKS
			 INTO @SCHEMA, @TABELA, @CAMPOFK, @ORGANISMO
			 
		END 
		
		CLOSE CR_FKS
		DEALLOCATE CR_FKS
		
		/* DROP DOS PROCEDIMENTOS */
		 
		PRINT 'DROP DOS PROCEDIMENTOS...'
		PRINT ''
		
		EXECUTE @PARAMETROS N'DROP PROCEDURE PAROQUIA.STP_GETNEXTSEQUENCE'
		
		EXECUTE SP_EXECUTESQL N'DROP PROCEDURE PAROQUIA.STP_UPDATEPAROQUIADIOCESE'
		
		EXECUTE SP_EXECUTESQL N'DROP PROCEDURE PAROQUIA.STP_UPDATENEWID'
		
		EXECUTE SP_EXECUTESQL N'DROP PROCEDURE PAROQUIA.STP_DE_PARA'
		
		EXECUTE @PARAMETROS N'DROP PROCEDURE PAROQUIA.STP_UPDATEREFERENCIAS'
		
		EXECUTE @PARAMETROS N'DROP PROCEDURE PAROQUIA.STP_INSERTNEWDATABASE'		
		
		EXECUTE SP_EXECUTESQL N'DROP PROCEDURE PAROQUIA.STP_TRATAPROFISSAO'	
		
		/* DROP DOS TIPOS */
		 
		PRINT 'DROP DOS TIPOS CRIADOS...'
		PRINT ''
		
		EXECUTE SP_EXECUTESQL N'DROP TYPE ESQUEMA'
		
		EXECUTE SP_EXECUTESQL N'DROP TYPE TABELA'
		
	END			
		
END

END TRY 
BEGIN CATCH     
SELECT  ERROR_NUMBER() AS ERRORNUMBER,
ERROR_SEVERITY() AS ERRORSEVERITY,
ERROR_STATE() AS ERRORSTATE,
ERROR_PROCEDURE() AS ERRORPROCEDURE,
ERROR_LINE() AS ERRORLINE,
ERROR_MESSAGE() AS ERRORMESSAGE, @QUERY

IF @@TRANCOUNT > 0         
ROLLBACK TRANSACTION

END CATCH;

IF @@TRANCOUNT > 0 
BEGIN    

	COMMIT TRANSACTION

	-- ATIVA TRIGGERS E CONSTRAINTS
	IF (@ATIVA_TRIGGERSFKS = 'S')
	BEGIN

		PRINT 'EXECUTANDO A ATIVAÇÃO DAS TRIGGERS E CONSTRAINTS EM ' + @SERVIDORDESTINO + '...'
		PRINT ''
		
		EXECUTE @PARAMETROS N'EXECUTE PAROQUIA.STP_ATIVATRIGGERSEFKS'

	END

	EXECUTE @PARAMETROS N'DROP PROCEDURE PAROQUIA.STP_ATIVATRIGGERSEFKS'

	-- EXECUTA A REPARAÇÃO DAS SEQUENCES NO SERVIDOR DE DESTINO
	IF (@REPARA_SEQUENCES = 'S')
	BEGIN

		PRINT 'REPARANDO AS SEQUÊNCES EM ' + @SERVIDORDESTINO + '...'
		PRINT ''

		-- REPARANDO AS SEQUENCES NA BASE DE DESTINO		
		EXECUTE @PARAMETROS N'EXECUTE PAROQUIA.STPREPARASEQUENCES 1, 1, 1, 1, 1, 1'
	
	END	

END	

END

PRINT '========================='
PRINT 'PROCEDIMENTO FINALIZADO!'
PRINT '========================='